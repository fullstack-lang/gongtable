// generated by ModelGongGraphFileTemplate
package models

func IsStaged[Type Gongstruct](stage *StageStruct, instance *Type) (ok bool) {

	switch target := any(instance).(type) {
	// insertion point for stage
	case *Cell:
		ok = stage.IsStagedCell(target)

	case *CellBoolean:
		ok = stage.IsStagedCellBoolean(target)

	case *CellFloat64:
		ok = stage.IsStagedCellFloat64(target)

	case *CellIcon:
		ok = stage.IsStagedCellIcon(target)

	case *CellInt:
		ok = stage.IsStagedCellInt(target)

	case *CellString:
		ok = stage.IsStagedCellString(target)

	case *DisplayedColumn:
		ok = stage.IsStagedDisplayedColumn(target)

	case *Row:
		ok = stage.IsStagedRow(target)

	case *Table:
		ok = stage.IsStagedTable(target)

	default:
		_ = target
	}
	return
}

// insertion point for stage per struct
	func (stage *StageStruct) IsStagedCell(cell *Cell) (ok bool) {

		_, ok = stage.Cells[cell]
	
		return
	}

	func (stage *StageStruct) IsStagedCellBoolean(cellboolean *CellBoolean) (ok bool) {

		_, ok = stage.CellBooleans[cellboolean]
	
		return
	}

	func (stage *StageStruct) IsStagedCellFloat64(cellfloat64 *CellFloat64) (ok bool) {

		_, ok = stage.CellFloat64s[cellfloat64]
	
		return
	}

	func (stage *StageStruct) IsStagedCellIcon(cellicon *CellIcon) (ok bool) {

		_, ok = stage.CellIcons[cellicon]
	
		return
	}

	func (stage *StageStruct) IsStagedCellInt(cellint *CellInt) (ok bool) {

		_, ok = stage.CellInts[cellint]
	
		return
	}

	func (stage *StageStruct) IsStagedCellString(cellstring *CellString) (ok bool) {

		_, ok = stage.CellStrings[cellstring]
	
		return
	}

	func (stage *StageStruct) IsStagedDisplayedColumn(displayedcolumn *DisplayedColumn) (ok bool) {

		_, ok = stage.DisplayedColumns[displayedcolumn]
	
		return
	}

	func (stage *StageStruct) IsStagedRow(row *Row) (ok bool) {

		_, ok = stage.Rows[row]
	
		return
	}

	func (stage *StageStruct) IsStagedTable(table *Table) (ok bool) {

		_, ok = stage.Tables[table]
	
		return
	}


// StageBranch stages instance and apply StageBranch on all gongstruct instances that are
// referenced by pointers or slices of pointers of the insance
//
// the algorithm stops along the course of graph if a vertex is already staged
func StageBranch[Type Gongstruct](stage *StageStruct, instance *Type) {

	switch target := any(instance).(type) {
	// insertion point for stage branch
	case *Cell:
		stage.StageBranchCell(target)

	case *CellBoolean:
		stage.StageBranchCellBoolean(target)

	case *CellFloat64:
		stage.StageBranchCellFloat64(target)

	case *CellIcon:
		stage.StageBranchCellIcon(target)

	case *CellInt:
		stage.StageBranchCellInt(target)

	case *CellString:
		stage.StageBranchCellString(target)

	case *DisplayedColumn:
		stage.StageBranchDisplayedColumn(target)

	case *Row:
		stage.StageBranchRow(target)

	case *Table:
		stage.StageBranchTable(target)

	default:
		_ = target
	}
}

// insertion point for stage branch per struct
func (stage *StageStruct) StageBranchCell(cell *Cell) {

	// check if instance is already staged
	if IsStaged(stage, cell) {
		return
	}

	cell.Stage(stage)

	//insertion point for the staging of instances referenced by pointers
	if cell.CellString != nil {
		StageBranch(stage, cell.CellString)
	}
	if cell.CellFloat64 != nil {
		StageBranch(stage, cell.CellFloat64)
	}
	if cell.CellInt != nil {
		StageBranch(stage, cell.CellInt)
	}
	if cell.CellBool != nil {
		StageBranch(stage, cell.CellBool)
	}
	if cell.CellIcon != nil {
		StageBranch(stage, cell.CellIcon)
	}

	//insertion point for the staging of instances referenced by slice of pointers

}

func (stage *StageStruct) StageBranchCellBoolean(cellboolean *CellBoolean) {

	// check if instance is already staged
	if IsStaged(stage, cellboolean) {
		return
	}

	cellboolean.Stage(stage)

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers

}

func (stage *StageStruct) StageBranchCellFloat64(cellfloat64 *CellFloat64) {

	// check if instance is already staged
	if IsStaged(stage, cellfloat64) {
		return
	}

	cellfloat64.Stage(stage)

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers

}

func (stage *StageStruct) StageBranchCellIcon(cellicon *CellIcon) {

	// check if instance is already staged
	if IsStaged(stage, cellicon) {
		return
	}

	cellicon.Stage(stage)

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers

}

func (stage *StageStruct) StageBranchCellInt(cellint *CellInt) {

	// check if instance is already staged
	if IsStaged(stage, cellint) {
		return
	}

	cellint.Stage(stage)

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers

}

func (stage *StageStruct) StageBranchCellString(cellstring *CellString) {

	// check if instance is already staged
	if IsStaged(stage, cellstring) {
		return
	}

	cellstring.Stage(stage)

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers

}

func (stage *StageStruct) StageBranchDisplayedColumn(displayedcolumn *DisplayedColumn) {

	// check if instance is already staged
	if IsStaged(stage, displayedcolumn) {
		return
	}

	displayedcolumn.Stage(stage)

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers

}

func (stage *StageStruct) StageBranchRow(row *Row) {

	// check if instance is already staged
	if IsStaged(stage, row) {
		return
	}

	row.Stage(stage)

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers
	for _, _cell := range row.Cells {
		StageBranch(stage, _cell)
	}

}

func (stage *StageStruct) StageBranchTable(table *Table) {

	// check if instance is already staged
	if IsStaged(stage, table) {
		return
	}

	table.Stage(stage)

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers
	for _, _displayedcolumn := range table.DisplayedColumns {
		StageBranch(stage, _displayedcolumn)
	}
	for _, _row := range table.Rows {
		StageBranch(stage, _row)
	}

}


// UnstageBranch stages instance and apply UnstageBranch on all gongstruct instances that are
// referenced by pointers or slices of pointers of the insance
//
// the algorithm stops along the course of graph if a vertex is already staged
func UnstageBranch[Type Gongstruct](stage *StageStruct, instance *Type) {

	switch target := any(instance).(type) {
	// insertion point for unstage branch
	case *Cell:
		stage.UnstageBranchCell(target)

	case *CellBoolean:
		stage.UnstageBranchCellBoolean(target)

	case *CellFloat64:
		stage.UnstageBranchCellFloat64(target)

	case *CellIcon:
		stage.UnstageBranchCellIcon(target)

	case *CellInt:
		stage.UnstageBranchCellInt(target)

	case *CellString:
		stage.UnstageBranchCellString(target)

	case *DisplayedColumn:
		stage.UnstageBranchDisplayedColumn(target)

	case *Row:
		stage.UnstageBranchRow(target)

	case *Table:
		stage.UnstageBranchTable(target)

	default:
		_ = target
	}
}

// insertion point for unstage branch per struct
func (stage *StageStruct) UnstageBranchCell(cell *Cell) {

	// check if instance is already staged
	if ! IsStaged(stage, cell) {
		return
	}

	cell.Unstage(stage)

	//insertion point for the staging of instances referenced by pointers
	if cell.CellString != nil {
		UnstageBranch(stage, cell.CellString)
	}
	if cell.CellFloat64 != nil {
		UnstageBranch(stage, cell.CellFloat64)
	}
	if cell.CellInt != nil {
		UnstageBranch(stage, cell.CellInt)
	}
	if cell.CellBool != nil {
		UnstageBranch(stage, cell.CellBool)
	}
	if cell.CellIcon != nil {
		UnstageBranch(stage, cell.CellIcon)
	}

	//insertion point for the staging of instances referenced by slice of pointers

}

func (stage *StageStruct) UnstageBranchCellBoolean(cellboolean *CellBoolean) {

	// check if instance is already staged
	if ! IsStaged(stage, cellboolean) {
		return
	}

	cellboolean.Unstage(stage)

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers

}

func (stage *StageStruct) UnstageBranchCellFloat64(cellfloat64 *CellFloat64) {

	// check if instance is already staged
	if ! IsStaged(stage, cellfloat64) {
		return
	}

	cellfloat64.Unstage(stage)

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers

}

func (stage *StageStruct) UnstageBranchCellIcon(cellicon *CellIcon) {

	// check if instance is already staged
	if ! IsStaged(stage, cellicon) {
		return
	}

	cellicon.Unstage(stage)

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers

}

func (stage *StageStruct) UnstageBranchCellInt(cellint *CellInt) {

	// check if instance is already staged
	if ! IsStaged(stage, cellint) {
		return
	}

	cellint.Unstage(stage)

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers

}

func (stage *StageStruct) UnstageBranchCellString(cellstring *CellString) {

	// check if instance is already staged
	if ! IsStaged(stage, cellstring) {
		return
	}

	cellstring.Unstage(stage)

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers

}

func (stage *StageStruct) UnstageBranchDisplayedColumn(displayedcolumn *DisplayedColumn) {

	// check if instance is already staged
	if ! IsStaged(stage, displayedcolumn) {
		return
	}

	displayedcolumn.Unstage(stage)

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers

}

func (stage *StageStruct) UnstageBranchRow(row *Row) {

	// check if instance is already staged
	if ! IsStaged(stage, row) {
		return
	}

	row.Unstage(stage)

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers
	for _, _cell := range row.Cells {
		UnstageBranch(stage, _cell)
	}

}

func (stage *StageStruct) UnstageBranchTable(table *Table) {

	// check if instance is already staged
	if ! IsStaged(stage, table) {
		return
	}

	table.Unstage(stage)

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers
	for _, _displayedcolumn := range table.DisplayedColumns {
		UnstageBranch(stage, _displayedcolumn)
	}
	for _, _row := range table.Rows {
		UnstageBranch(stage, _row)
	}

}

