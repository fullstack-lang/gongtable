// generated by ModelGongFileTemplate
package models

import (
	"errors"
	"fmt"
	"sync"
)

// errUnkownEnum is returns when a value cannot match enum values
var errUnkownEnum = errors.New("unkown enum")

// needed to avoid when fmt package is not needed by generated code
var __dummy__fmt_variable fmt.Scanner

// swagger:ignore
type __void any

// needed for creating set of instances in the stage
var __member __void

// GongStructInterface is the interface met by GongStructs
// It allows runtime reflexion of instances (without the hassle of the "reflect" package)
type GongStructInterface interface {
	GetName() (res string)
	GetFields() (res []string)
	GetFieldStringValue(fieldName string) (res string)
}

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Cells           map[*Cell]any
	Cells_mapString map[string]*Cell

	OnAfterCellCreateCallback OnAfterCreateInterface[Cell]
	OnAfterCellUpdateCallback OnAfterUpdateInterface[Cell]
	OnAfterCellDeleteCallback OnAfterDeleteInterface[Cell]
	OnAfterCellReadCallback   OnAfterReadInterface[Cell]

	CellBooleans           map[*CellBoolean]any
	CellBooleans_mapString map[string]*CellBoolean

	OnAfterCellBooleanCreateCallback OnAfterCreateInterface[CellBoolean]
	OnAfterCellBooleanUpdateCallback OnAfterUpdateInterface[CellBoolean]
	OnAfterCellBooleanDeleteCallback OnAfterDeleteInterface[CellBoolean]
	OnAfterCellBooleanReadCallback   OnAfterReadInterface[CellBoolean]

	CellFloat64s           map[*CellFloat64]any
	CellFloat64s_mapString map[string]*CellFloat64

	OnAfterCellFloat64CreateCallback OnAfterCreateInterface[CellFloat64]
	OnAfterCellFloat64UpdateCallback OnAfterUpdateInterface[CellFloat64]
	OnAfterCellFloat64DeleteCallback OnAfterDeleteInterface[CellFloat64]
	OnAfterCellFloat64ReadCallback   OnAfterReadInterface[CellFloat64]

	CellIcons           map[*CellIcon]any
	CellIcons_mapString map[string]*CellIcon

	OnAfterCellIconCreateCallback OnAfterCreateInterface[CellIcon]
	OnAfterCellIconUpdateCallback OnAfterUpdateInterface[CellIcon]
	OnAfterCellIconDeleteCallback OnAfterDeleteInterface[CellIcon]
	OnAfterCellIconReadCallback   OnAfterReadInterface[CellIcon]

	CellInts           map[*CellInt]any
	CellInts_mapString map[string]*CellInt

	OnAfterCellIntCreateCallback OnAfterCreateInterface[CellInt]
	OnAfterCellIntUpdateCallback OnAfterUpdateInterface[CellInt]
	OnAfterCellIntDeleteCallback OnAfterDeleteInterface[CellInt]
	OnAfterCellIntReadCallback   OnAfterReadInterface[CellInt]

	CellStrings           map[*CellString]any
	CellStrings_mapString map[string]*CellString

	OnAfterCellStringCreateCallback OnAfterCreateInterface[CellString]
	OnAfterCellStringUpdateCallback OnAfterUpdateInterface[CellString]
	OnAfterCellStringDeleteCallback OnAfterDeleteInterface[CellString]
	OnAfterCellStringReadCallback   OnAfterReadInterface[CellString]

	DisplayedColumns           map[*DisplayedColumn]any
	DisplayedColumns_mapString map[string]*DisplayedColumn

	OnAfterDisplayedColumnCreateCallback OnAfterCreateInterface[DisplayedColumn]
	OnAfterDisplayedColumnUpdateCallback OnAfterUpdateInterface[DisplayedColumn]
	OnAfterDisplayedColumnDeleteCallback OnAfterDeleteInterface[DisplayedColumn]
	OnAfterDisplayedColumnReadCallback   OnAfterReadInterface[DisplayedColumn]

	Rows           map[*Row]any
	Rows_mapString map[string]*Row

	OnAfterRowCreateCallback OnAfterCreateInterface[Row]
	OnAfterRowUpdateCallback OnAfterUpdateInterface[Row]
	OnAfterRowDeleteCallback OnAfterDeleteInterface[Row]
	OnAfterRowReadCallback   OnAfterReadInterface[Row]

	Tables           map[*Table]any
	Tables_mapString map[string]*Table

	OnAfterTableCreateCallback OnAfterCreateInterface[Table]
	OnAfterTableUpdateCallback OnAfterUpdateInterface[Table]
	OnAfterTableDeleteCallback OnAfterDeleteInterface[Table]
	OnAfterTableReadCallback   OnAfterReadInterface[Table]

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int

	// store meta package import
	MetaPackageImportPath  string
	MetaPackageImportAlias string

	// to be removed after fix of [issue](https://github.com/golang/go/issues/57559)
	// map to enable docLink renaming when an identifier is renamed
	Map_DocLink_Renaming map[string]GONG__Identifier
	// the to be removed stops here
}

type GONG__Identifier struct {
	Ident string
	Type  GONG__ExpressionType
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

// OnAfterCreateInterface callback when an instance is updated from the front
type OnAfterCreateInterface[Type Gongstruct] interface {
	OnAfterCreate(stage *StageStruct,
		instance *Type)
}

// OnAfterReadInterface callback when an instance is updated from the front
type OnAfterReadInterface[Type Gongstruct] interface {
	OnAfterRead(stage *StageStruct,
		instance *Type)
}

// OnAfterUpdateInterface callback when an instance is updated from the front
type OnAfterUpdateInterface[Type Gongstruct] interface {
	OnAfterUpdate(stage *StageStruct, old, new *Type)
}

// OnAfterDeleteInterface callback when an instance is updated from the front
type OnAfterDeleteInterface[Type Gongstruct] interface {
	OnAfterDelete(stage *StageStruct,
		staged, front *Type)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitCell(cell *Cell)
	CheckoutCell(cell *Cell)
	CommitCellBoolean(cellboolean *CellBoolean)
	CheckoutCellBoolean(cellboolean *CellBoolean)
	CommitCellFloat64(cellfloat64 *CellFloat64)
	CheckoutCellFloat64(cellfloat64 *CellFloat64)
	CommitCellIcon(cellicon *CellIcon)
	CheckoutCellIcon(cellicon *CellIcon)
	CommitCellInt(cellint *CellInt)
	CheckoutCellInt(cellint *CellInt)
	CommitCellString(cellstring *CellString)
	CheckoutCellString(cellstring *CellString)
	CommitDisplayedColumn(displayedcolumn *DisplayedColumn)
	CheckoutDisplayedColumn(displayedcolumn *DisplayedColumn)
	CommitRow(row *Row)
	CheckoutRow(row *Row)
	CommitTable(table *Table)
	CheckoutTable(table *Table)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

var _stage *StageStruct

var once sync.Once

func GetDefaultStage() *StageStruct {
	once.Do(func() {
		_stage = NewStage()
	})
	return _stage
}

func NewStage() (stage *StageStruct) {

	stage = &StageStruct{ // insertion point for array initiatialisation
		Cells:           make(map[*Cell]any),
		Cells_mapString: make(map[string]*Cell),

		CellBooleans:           make(map[*CellBoolean]any),
		CellBooleans_mapString: make(map[string]*CellBoolean),

		CellFloat64s:           make(map[*CellFloat64]any),
		CellFloat64s_mapString: make(map[string]*CellFloat64),

		CellIcons:           make(map[*CellIcon]any),
		CellIcons_mapString: make(map[string]*CellIcon),

		CellInts:           make(map[*CellInt]any),
		CellInts_mapString: make(map[string]*CellInt),

		CellStrings:           make(map[*CellString]any),
		CellStrings_mapString: make(map[string]*CellString),

		DisplayedColumns:           make(map[*DisplayedColumn]any),
		DisplayedColumns_mapString: make(map[string]*DisplayedColumn),

		Rows:           make(map[*Row]any),
		Rows_mapString: make(map[string]*Row),

		Tables:           make(map[*Table]any),
		Tables_mapString: make(map[string]*Table),

		// end of insertion point
		Map_GongStructName_InstancesNb: make(map[string]int),

		// to be removed after fix of [issue](https://github.com/golang/go/issues/57559)
		Map_DocLink_Renaming: make(map[string]GONG__Identifier),
		// the to be removed stops here
	}

	return
}

func (stage *StageStruct) CommitWithSuspendedCallbacks() {

	tmp := stage.OnInitCommitFromBackCallback
	stage.OnInitCommitFromBackCallback = nil
	stage.Commit()
	stage.OnInitCommitFromBackCallback = tmp
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Cell"] = len(stage.Cells)
	stage.Map_GongStructName_InstancesNb["CellBoolean"] = len(stage.CellBooleans)
	stage.Map_GongStructName_InstancesNb["CellFloat64"] = len(stage.CellFloat64s)
	stage.Map_GongStructName_InstancesNb["CellIcon"] = len(stage.CellIcons)
	stage.Map_GongStructName_InstancesNb["CellInt"] = len(stage.CellInts)
	stage.Map_GongStructName_InstancesNb["CellString"] = len(stage.CellStrings)
	stage.Map_GongStructName_InstancesNb["DisplayedColumn"] = len(stage.DisplayedColumns)
	stage.Map_GongStructName_InstancesNb["Row"] = len(stage.Rows)
	stage.Map_GongStructName_InstancesNb["Table"] = len(stage.Tables)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Cell"] = len(stage.Cells)
	stage.Map_GongStructName_InstancesNb["CellBoolean"] = len(stage.CellBooleans)
	stage.Map_GongStructName_InstancesNb["CellFloat64"] = len(stage.CellFloat64s)
	stage.Map_GongStructName_InstancesNb["CellIcon"] = len(stage.CellIcons)
	stage.Map_GongStructName_InstancesNb["CellInt"] = len(stage.CellInts)
	stage.Map_GongStructName_InstancesNb["CellString"] = len(stage.CellStrings)
	stage.Map_GongStructName_InstancesNb["DisplayedColumn"] = len(stage.DisplayedColumns)
	stage.Map_GongStructName_InstancesNb["Row"] = len(stage.Rows)
	stage.Map_GongStructName_InstancesNb["Table"] = len(stage.Tables)

}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
// Stage puts cell to the model stage
func (cell *Cell) Stage(stage *StageStruct) *Cell {
	stage.Cells[cell] = __member
	stage.Cells_mapString[cell.Name] = cell

	return cell
}

// Unstage removes cell off the model stage
func (cell *Cell) Unstage(stage *StageStruct) *Cell {
	delete(stage.Cells, cell)
	delete(stage.Cells_mapString, cell.Name)
	return cell
}

// commit cell to the back repo (if it is already staged)
func (cell *Cell) Commit(stage *StageStruct) *Cell {
	if _, ok := stage.Cells[cell]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CommitCell(cell)
		}
	}
	return cell
}

// Checkout cell to the back repo (if it is already staged)
func (cell *Cell) Checkout(stage *StageStruct) *Cell {
	if _, ok := stage.Cells[cell]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CheckoutCell(cell)
		}
	}
	return cell
}

// for satisfaction of GongStruct interface
func (cell *Cell) GetName() (res string) {
	return cell.Name
}

// Stage puts cellboolean to the model stage
func (cellboolean *CellBoolean) Stage(stage *StageStruct) *CellBoolean {
	stage.CellBooleans[cellboolean] = __member
	stage.CellBooleans_mapString[cellboolean.Name] = cellboolean

	return cellboolean
}

// Unstage removes cellboolean off the model stage
func (cellboolean *CellBoolean) Unstage(stage *StageStruct) *CellBoolean {
	delete(stage.CellBooleans, cellboolean)
	delete(stage.CellBooleans_mapString, cellboolean.Name)
	return cellboolean
}

// commit cellboolean to the back repo (if it is already staged)
func (cellboolean *CellBoolean) Commit(stage *StageStruct) *CellBoolean {
	if _, ok := stage.CellBooleans[cellboolean]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CommitCellBoolean(cellboolean)
		}
	}
	return cellboolean
}

// Checkout cellboolean to the back repo (if it is already staged)
func (cellboolean *CellBoolean) Checkout(stage *StageStruct) *CellBoolean {
	if _, ok := stage.CellBooleans[cellboolean]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CheckoutCellBoolean(cellboolean)
		}
	}
	return cellboolean
}

// for satisfaction of GongStruct interface
func (cellboolean *CellBoolean) GetName() (res string) {
	return cellboolean.Name
}

// Stage puts cellfloat64 to the model stage
func (cellfloat64 *CellFloat64) Stage(stage *StageStruct) *CellFloat64 {
	stage.CellFloat64s[cellfloat64] = __member
	stage.CellFloat64s_mapString[cellfloat64.Name] = cellfloat64

	return cellfloat64
}

// Unstage removes cellfloat64 off the model stage
func (cellfloat64 *CellFloat64) Unstage(stage *StageStruct) *CellFloat64 {
	delete(stage.CellFloat64s, cellfloat64)
	delete(stage.CellFloat64s_mapString, cellfloat64.Name)
	return cellfloat64
}

// commit cellfloat64 to the back repo (if it is already staged)
func (cellfloat64 *CellFloat64) Commit(stage *StageStruct) *CellFloat64 {
	if _, ok := stage.CellFloat64s[cellfloat64]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CommitCellFloat64(cellfloat64)
		}
	}
	return cellfloat64
}

// Checkout cellfloat64 to the back repo (if it is already staged)
func (cellfloat64 *CellFloat64) Checkout(stage *StageStruct) *CellFloat64 {
	if _, ok := stage.CellFloat64s[cellfloat64]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CheckoutCellFloat64(cellfloat64)
		}
	}
	return cellfloat64
}

// for satisfaction of GongStruct interface
func (cellfloat64 *CellFloat64) GetName() (res string) {
	return cellfloat64.Name
}

// Stage puts cellicon to the model stage
func (cellicon *CellIcon) Stage(stage *StageStruct) *CellIcon {
	stage.CellIcons[cellicon] = __member
	stage.CellIcons_mapString[cellicon.Name] = cellicon

	return cellicon
}

// Unstage removes cellicon off the model stage
func (cellicon *CellIcon) Unstage(stage *StageStruct) *CellIcon {
	delete(stage.CellIcons, cellicon)
	delete(stage.CellIcons_mapString, cellicon.Name)
	return cellicon
}

// commit cellicon to the back repo (if it is already staged)
func (cellicon *CellIcon) Commit(stage *StageStruct) *CellIcon {
	if _, ok := stage.CellIcons[cellicon]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CommitCellIcon(cellicon)
		}
	}
	return cellicon
}

// Checkout cellicon to the back repo (if it is already staged)
func (cellicon *CellIcon) Checkout(stage *StageStruct) *CellIcon {
	if _, ok := stage.CellIcons[cellicon]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CheckoutCellIcon(cellicon)
		}
	}
	return cellicon
}

// for satisfaction of GongStruct interface
func (cellicon *CellIcon) GetName() (res string) {
	return cellicon.Name
}

// Stage puts cellint to the model stage
func (cellint *CellInt) Stage(stage *StageStruct) *CellInt {
	stage.CellInts[cellint] = __member
	stage.CellInts_mapString[cellint.Name] = cellint

	return cellint
}

// Unstage removes cellint off the model stage
func (cellint *CellInt) Unstage(stage *StageStruct) *CellInt {
	delete(stage.CellInts, cellint)
	delete(stage.CellInts_mapString, cellint.Name)
	return cellint
}

// commit cellint to the back repo (if it is already staged)
func (cellint *CellInt) Commit(stage *StageStruct) *CellInt {
	if _, ok := stage.CellInts[cellint]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CommitCellInt(cellint)
		}
	}
	return cellint
}

// Checkout cellint to the back repo (if it is already staged)
func (cellint *CellInt) Checkout(stage *StageStruct) *CellInt {
	if _, ok := stage.CellInts[cellint]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CheckoutCellInt(cellint)
		}
	}
	return cellint
}

// for satisfaction of GongStruct interface
func (cellint *CellInt) GetName() (res string) {
	return cellint.Name
}

// Stage puts cellstring to the model stage
func (cellstring *CellString) Stage(stage *StageStruct) *CellString {
	stage.CellStrings[cellstring] = __member
	stage.CellStrings_mapString[cellstring.Name] = cellstring

	return cellstring
}

// Unstage removes cellstring off the model stage
func (cellstring *CellString) Unstage(stage *StageStruct) *CellString {
	delete(stage.CellStrings, cellstring)
	delete(stage.CellStrings_mapString, cellstring.Name)
	return cellstring
}

// commit cellstring to the back repo (if it is already staged)
func (cellstring *CellString) Commit(stage *StageStruct) *CellString {
	if _, ok := stage.CellStrings[cellstring]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CommitCellString(cellstring)
		}
	}
	return cellstring
}

// Checkout cellstring to the back repo (if it is already staged)
func (cellstring *CellString) Checkout(stage *StageStruct) *CellString {
	if _, ok := stage.CellStrings[cellstring]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CheckoutCellString(cellstring)
		}
	}
	return cellstring
}

// for satisfaction of GongStruct interface
func (cellstring *CellString) GetName() (res string) {
	return cellstring.Name
}

// Stage puts displayedcolumn to the model stage
func (displayedcolumn *DisplayedColumn) Stage(stage *StageStruct) *DisplayedColumn {
	stage.DisplayedColumns[displayedcolumn] = __member
	stage.DisplayedColumns_mapString[displayedcolumn.Name] = displayedcolumn

	return displayedcolumn
}

// Unstage removes displayedcolumn off the model stage
func (displayedcolumn *DisplayedColumn) Unstage(stage *StageStruct) *DisplayedColumn {
	delete(stage.DisplayedColumns, displayedcolumn)
	delete(stage.DisplayedColumns_mapString, displayedcolumn.Name)
	return displayedcolumn
}

// commit displayedcolumn to the back repo (if it is already staged)
func (displayedcolumn *DisplayedColumn) Commit(stage *StageStruct) *DisplayedColumn {
	if _, ok := stage.DisplayedColumns[displayedcolumn]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CommitDisplayedColumn(displayedcolumn)
		}
	}
	return displayedcolumn
}

// Checkout displayedcolumn to the back repo (if it is already staged)
func (displayedcolumn *DisplayedColumn) Checkout(stage *StageStruct) *DisplayedColumn {
	if _, ok := stage.DisplayedColumns[displayedcolumn]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CheckoutDisplayedColumn(displayedcolumn)
		}
	}
	return displayedcolumn
}

// for satisfaction of GongStruct interface
func (displayedcolumn *DisplayedColumn) GetName() (res string) {
	return displayedcolumn.Name
}

// Stage puts row to the model stage
func (row *Row) Stage(stage *StageStruct) *Row {
	stage.Rows[row] = __member
	stage.Rows_mapString[row.Name] = row

	return row
}

// Unstage removes row off the model stage
func (row *Row) Unstage(stage *StageStruct) *Row {
	delete(stage.Rows, row)
	delete(stage.Rows_mapString, row.Name)
	return row
}

// commit row to the back repo (if it is already staged)
func (row *Row) Commit(stage *StageStruct) *Row {
	if _, ok := stage.Rows[row]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CommitRow(row)
		}
	}
	return row
}

// Checkout row to the back repo (if it is already staged)
func (row *Row) Checkout(stage *StageStruct) *Row {
	if _, ok := stage.Rows[row]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CheckoutRow(row)
		}
	}
	return row
}

// for satisfaction of GongStruct interface
func (row *Row) GetName() (res string) {
	return row.Name
}

// Stage puts table to the model stage
func (table *Table) Stage(stage *StageStruct) *Table {
	stage.Tables[table] = __member
	stage.Tables_mapString[table.Name] = table

	return table
}

// Unstage removes table off the model stage
func (table *Table) Unstage(stage *StageStruct) *Table {
	delete(stage.Tables, table)
	delete(stage.Tables_mapString, table.Name)
	return table
}

// commit table to the back repo (if it is already staged)
func (table *Table) Commit(stage *StageStruct) *Table {
	if _, ok := stage.Tables[table]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CommitTable(table)
		}
	}
	return table
}

// Checkout table to the back repo (if it is already staged)
func (table *Table) Checkout(stage *StageStruct) *Table {
	if _, ok := stage.Tables[table]; ok {
		if stage.BackRepo != nil {
			stage.BackRepo.CheckoutTable(table)
		}
	}
	return table
}

// for satisfaction of GongStruct interface
func (table *Table) GetName() (res string) {
	return table.Name
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMCell(Cell *Cell)
	CreateORMCellBoolean(CellBoolean *CellBoolean)
	CreateORMCellFloat64(CellFloat64 *CellFloat64)
	CreateORMCellIcon(CellIcon *CellIcon)
	CreateORMCellInt(CellInt *CellInt)
	CreateORMCellString(CellString *CellString)
	CreateORMDisplayedColumn(DisplayedColumn *DisplayedColumn)
	CreateORMRow(Row *Row)
	CreateORMTable(Table *Table)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMCell(Cell *Cell)
	DeleteORMCellBoolean(CellBoolean *CellBoolean)
	DeleteORMCellFloat64(CellFloat64 *CellFloat64)
	DeleteORMCellIcon(CellIcon *CellIcon)
	DeleteORMCellInt(CellInt *CellInt)
	DeleteORMCellString(CellString *CellString)
	DeleteORMDisplayedColumn(DisplayedColumn *DisplayedColumn)
	DeleteORMRow(Row *Row)
	DeleteORMTable(Table *Table)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Cells = make(map[*Cell]any)
	stage.Cells_mapString = make(map[string]*Cell)

	stage.CellBooleans = make(map[*CellBoolean]any)
	stage.CellBooleans_mapString = make(map[string]*CellBoolean)

	stage.CellFloat64s = make(map[*CellFloat64]any)
	stage.CellFloat64s_mapString = make(map[string]*CellFloat64)

	stage.CellIcons = make(map[*CellIcon]any)
	stage.CellIcons_mapString = make(map[string]*CellIcon)

	stage.CellInts = make(map[*CellInt]any)
	stage.CellInts_mapString = make(map[string]*CellInt)

	stage.CellStrings = make(map[*CellString]any)
	stage.CellStrings_mapString = make(map[string]*CellString)

	stage.DisplayedColumns = make(map[*DisplayedColumn]any)
	stage.DisplayedColumns_mapString = make(map[string]*DisplayedColumn)

	stage.Rows = make(map[*Row]any)
	stage.Rows_mapString = make(map[string]*Row)

	stage.Tables = make(map[*Table]any)
	stage.Tables_mapString = make(map[string]*Table)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Cells = nil
	stage.Cells_mapString = nil

	stage.CellBooleans = nil
	stage.CellBooleans_mapString = nil

	stage.CellFloat64s = nil
	stage.CellFloat64s_mapString = nil

	stage.CellIcons = nil
	stage.CellIcons_mapString = nil

	stage.CellInts = nil
	stage.CellInts_mapString = nil

	stage.CellStrings = nil
	stage.CellStrings_mapString = nil

	stage.DisplayedColumns = nil
	stage.DisplayedColumns_mapString = nil

	stage.Rows = nil
	stage.Rows_mapString = nil

	stage.Tables = nil
	stage.Tables_mapString = nil

}

func (stage *StageStruct) Unstage() { // insertion point for array nil
	for cell := range stage.Cells {
		cell.Unstage(stage)
	}

	for cellboolean := range stage.CellBooleans {
		cellboolean.Unstage(stage)
	}

	for cellfloat64 := range stage.CellFloat64s {
		cellfloat64.Unstage(stage)
	}

	for cellicon := range stage.CellIcons {
		cellicon.Unstage(stage)
	}

	for cellint := range stage.CellInts {
		cellint.Unstage(stage)
	}

	for cellstring := range stage.CellStrings {
		cellstring.Unstage(stage)
	}

	for displayedcolumn := range stage.DisplayedColumns {
		displayedcolumn.Unstage(stage)
	}

	for row := range stage.Rows {
		row.Unstage(stage)
	}

	for table := range stage.Tables {
		table.Unstage(stage)
	}

}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type Gongstruct interface {
	// insertion point for generic types
	Cell | CellBoolean | CellFloat64 | CellIcon | CellInt | CellString | DisplayedColumn | Row | Table
}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type PointerToGongstruct interface {
	// insertion point for generic types
	*Cell | *CellBoolean | *CellFloat64 | *CellIcon | *CellInt | *CellString | *DisplayedColumn | *Row | *Table
	GetName() string
}

type GongstructSet interface {
	map[any]any |
		// insertion point for generic types
		map[*Cell]any |
		map[*CellBoolean]any |
		map[*CellFloat64]any |
		map[*CellIcon]any |
		map[*CellInt]any |
		map[*CellString]any |
		map[*DisplayedColumn]any |
		map[*Row]any |
		map[*Table]any |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

type GongstructMapString interface {
	map[any]any |
		// insertion point for generic types
		map[string]*Cell |
		map[string]*CellBoolean |
		map[string]*CellFloat64 |
		map[string]*CellIcon |
		map[string]*CellInt |
		map[string]*CellString |
		map[string]*DisplayedColumn |
		map[string]*Row |
		map[string]*Table |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

// GongGetSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetSet[Type GongstructSet](stage *StageStruct) *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[*Cell]any:
		return any(&stage.Cells).(*Type)
	case map[*CellBoolean]any:
		return any(&stage.CellBooleans).(*Type)
	case map[*CellFloat64]any:
		return any(&stage.CellFloat64s).(*Type)
	case map[*CellIcon]any:
		return any(&stage.CellIcons).(*Type)
	case map[*CellInt]any:
		return any(&stage.CellInts).(*Type)
	case map[*CellString]any:
		return any(&stage.CellStrings).(*Type)
	case map[*DisplayedColumn]any:
		return any(&stage.DisplayedColumns).(*Type)
	case map[*Row]any:
		return any(&stage.Rows).(*Type)
	case map[*Table]any:
		return any(&stage.Tables).(*Type)
	default:
		return nil
	}
}

// GongGetMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetMap[Type GongstructMapString](stage *StageStruct) *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[string]*Cell:
		return any(&stage.Cells_mapString).(*Type)
	case map[string]*CellBoolean:
		return any(&stage.CellBooleans_mapString).(*Type)
	case map[string]*CellFloat64:
		return any(&stage.CellFloat64s_mapString).(*Type)
	case map[string]*CellIcon:
		return any(&stage.CellIcons_mapString).(*Type)
	case map[string]*CellInt:
		return any(&stage.CellInts_mapString).(*Type)
	case map[string]*CellString:
		return any(&stage.CellStrings_mapString).(*Type)
	case map[string]*DisplayedColumn:
		return any(&stage.DisplayedColumns_mapString).(*Type)
	case map[string]*Row:
		return any(&stage.Rows_mapString).(*Type)
	case map[string]*Table:
		return any(&stage.Tables_mapString).(*Type)
	default:
		return nil
	}
}

// GetGongstructInstancesSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gongstruct identifier
func GetGongstructInstancesSet[Type Gongstruct](stage *StageStruct) *map[*Type]any {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case Cell:
		return any(&stage.Cells).(*map[*Type]any)
	case CellBoolean:
		return any(&stage.CellBooleans).(*map[*Type]any)
	case CellFloat64:
		return any(&stage.CellFloat64s).(*map[*Type]any)
	case CellIcon:
		return any(&stage.CellIcons).(*map[*Type]any)
	case CellInt:
		return any(&stage.CellInts).(*map[*Type]any)
	case CellString:
		return any(&stage.CellStrings).(*map[*Type]any)
	case DisplayedColumn:
		return any(&stage.DisplayedColumns).(*map[*Type]any)
	case Row:
		return any(&stage.Rows).(*map[*Type]any)
	case Table:
		return any(&stage.Tables).(*map[*Type]any)
	default:
		return nil
	}
}

// GetGongstructInstancesMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GetGongstructInstancesMap[Type Gongstruct](stage *StageStruct) *map[string]*Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case Cell:
		return any(&stage.Cells_mapString).(*map[string]*Type)
	case CellBoolean:
		return any(&stage.CellBooleans_mapString).(*map[string]*Type)
	case CellFloat64:
		return any(&stage.CellFloat64s_mapString).(*map[string]*Type)
	case CellIcon:
		return any(&stage.CellIcons_mapString).(*map[string]*Type)
	case CellInt:
		return any(&stage.CellInts_mapString).(*map[string]*Type)
	case CellString:
		return any(&stage.CellStrings_mapString).(*map[string]*Type)
	case DisplayedColumn:
		return any(&stage.DisplayedColumns_mapString).(*map[string]*Type)
	case Row:
		return any(&stage.Rows_mapString).(*map[string]*Type)
	case Table:
		return any(&stage.Tables_mapString).(*map[string]*Type)
	default:
		return nil
	}
}

// GetAssociationName is a generic function that returns an instance of Type
// where each association is filled with an instance whose name is the name of the association
//
// This function can be handy for generating navigation function that are refactorable
func GetAssociationName[Type Gongstruct]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for instance with special fields
	case Cell:
		return any(&Cell{
			// Initialisation of associations
			// field is initialized with an instance of CellString with the name of the field
			CellString: &CellString{Name: "CellString"},
			// field is initialized with an instance of CellFloat64 with the name of the field
			CellFloat64: &CellFloat64{Name: "CellFloat64"},
			// field is initialized with an instance of CellInt with the name of the field
			CellInt: &CellInt{Name: "CellInt"},
			// field is initialized with an instance of CellBoolean with the name of the field
			CellBool: &CellBoolean{Name: "CellBool"},
			// field is initialized with an instance of CellIcon with the name of the field
			CellIcon: &CellIcon{Name: "CellIcon"},
		}).(*Type)
	case CellBoolean:
		return any(&CellBoolean{
			// Initialisation of associations
		}).(*Type)
	case CellFloat64:
		return any(&CellFloat64{
			// Initialisation of associations
		}).(*Type)
	case CellIcon:
		return any(&CellIcon{
			// Initialisation of associations
		}).(*Type)
	case CellInt:
		return any(&CellInt{
			// Initialisation of associations
		}).(*Type)
	case CellString:
		return any(&CellString{
			// Initialisation of associations
		}).(*Type)
	case DisplayedColumn:
		return any(&DisplayedColumn{
			// Initialisation of associations
		}).(*Type)
	case Row:
		return any(&Row{
			// Initialisation of associations
			// field is initialized with an instance of Cell with the name of the field
			Cells: []*Cell{{Name: "Cells"}},
		}).(*Type)
	case Table:
		return any(&Table{
			// Initialisation of associations
			// field is initialized with an instance of DisplayedColumn with the name of the field
			DisplayedColumns: []*DisplayedColumn{{Name: "DisplayedColumns"}},
			// field is initialized with an instance of Row with the name of the field
			Rows: []*Row{{Name: "Rows"}},
		}).(*Type)
	default:
		return nil
	}
}

// GetPointerReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..1) that is a pointer from one staged Gongstruct (type Start)
// instances to another (type End)
//
// The function provides a map with keys as instances of End and values to arrays of *Start
// the map is construed by iterating over all Start instances and populationg keys with End instances
// and values with slice of Start instances
func GetPointerReverseMap[Start, End Gongstruct](fieldname string, stage *StageStruct) map[*End][]*Start {

	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of Cell
	case Cell:
		switch fieldname {
		// insertion point for per direct association field
		case "CellString":
			res := make(map[*CellString][]*Cell)
			for cell := range stage.Cells {
				if cell.CellString != nil {
					cellstring_ := cell.CellString
					var cells []*Cell
					_, ok := res[cellstring_]
					if ok {
						cells = res[cellstring_]
					} else {
						cells = make([]*Cell, 0)
					}
					cells = append(cells, cell)
					res[cellstring_] = cells
				}
			}
			return any(res).(map[*End][]*Start)
		case "CellFloat64":
			res := make(map[*CellFloat64][]*Cell)
			for cell := range stage.Cells {
				if cell.CellFloat64 != nil {
					cellfloat64_ := cell.CellFloat64
					var cells []*Cell
					_, ok := res[cellfloat64_]
					if ok {
						cells = res[cellfloat64_]
					} else {
						cells = make([]*Cell, 0)
					}
					cells = append(cells, cell)
					res[cellfloat64_] = cells
				}
			}
			return any(res).(map[*End][]*Start)
		case "CellInt":
			res := make(map[*CellInt][]*Cell)
			for cell := range stage.Cells {
				if cell.CellInt != nil {
					cellint_ := cell.CellInt
					var cells []*Cell
					_, ok := res[cellint_]
					if ok {
						cells = res[cellint_]
					} else {
						cells = make([]*Cell, 0)
					}
					cells = append(cells, cell)
					res[cellint_] = cells
				}
			}
			return any(res).(map[*End][]*Start)
		case "CellBool":
			res := make(map[*CellBoolean][]*Cell)
			for cell := range stage.Cells {
				if cell.CellBool != nil {
					cellboolean_ := cell.CellBool
					var cells []*Cell
					_, ok := res[cellboolean_]
					if ok {
						cells = res[cellboolean_]
					} else {
						cells = make([]*Cell, 0)
					}
					cells = append(cells, cell)
					res[cellboolean_] = cells
				}
			}
			return any(res).(map[*End][]*Start)
		case "CellIcon":
			res := make(map[*CellIcon][]*Cell)
			for cell := range stage.Cells {
				if cell.CellIcon != nil {
					cellicon_ := cell.CellIcon
					var cells []*Cell
					_, ok := res[cellicon_]
					if ok {
						cells = res[cellicon_]
					} else {
						cells = make([]*Cell, 0)
					}
					cells = append(cells, cell)
					res[cellicon_] = cells
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of CellBoolean
	case CellBoolean:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of CellFloat64
	case CellFloat64:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of CellIcon
	case CellIcon:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of CellInt
	case CellInt:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of CellString
	case CellString:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of DisplayedColumn
	case DisplayedColumn:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Row
	case Row:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Table
	case Table:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetSliceOfPointersReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..N) between one staged Gongstruct instances and many others
//
// The function provides a map with keys as instances of End and values to *Start instances
// the map is construed by iterating over all Start instances and populating keys with End instances
// and values with the Start instances
func GetSliceOfPointersReverseMap[Start, End Gongstruct](fieldname string, stage *StageStruct) map[*End]*Start {

	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of Cell
	case Cell:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of CellBoolean
	case CellBoolean:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of CellFloat64
	case CellFloat64:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of CellIcon
	case CellIcon:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of CellInt
	case CellInt:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of CellString
	case CellString:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of DisplayedColumn
	case DisplayedColumn:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Row
	case Row:
		switch fieldname {
		// insertion point for per direct association field
		case "Cells":
			res := make(map[*Cell]*Row)
			for row := range stage.Rows {
				for _, cell_ := range row.Cells {
					res[cell_] = row
				}
			}
			return any(res).(map[*End]*Start)
		}
	// reverse maps of direct associations of Table
	case Table:
		switch fieldname {
		// insertion point for per direct association field
		case "DisplayedColumns":
			res := make(map[*DisplayedColumn]*Table)
			for table := range stage.Tables {
				for _, displayedcolumn_ := range table.DisplayedColumns {
					res[displayedcolumn_] = table
				}
			}
			return any(res).(map[*End]*Start)
		case "Rows":
			res := make(map[*Row]*Table)
			for table := range stage.Tables {
				for _, row_ := range table.Rows {
					res[row_] = table
				}
			}
			return any(res).(map[*End]*Start)
		}
	}
	return nil
}

// GetGongstructName returns the name of the Gongstruct
// this can be usefull if one want program robust to refactoring
func GetGongstructName[Type Gongstruct]() (res string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case Cell:
		res = "Cell"
	case CellBoolean:
		res = "CellBoolean"
	case CellFloat64:
		res = "CellFloat64"
	case CellIcon:
		res = "CellIcon"
	case CellInt:
		res = "CellInt"
	case CellString:
		res = "CellString"
	case DisplayedColumn:
		res = "DisplayedColumn"
	case Row:
		res = "Row"
	case Table:
		res = "Table"
	}
	return res
}

// GetFields return the array of the fields
func GetFields[Type Gongstruct]() (res []string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case Cell:
		res = []string{"Name", "CellString", "CellFloat64", "CellInt", "CellBool", "CellIcon"}
	case CellBoolean:
		res = []string{"Name", "Value"}
	case CellFloat64:
		res = []string{"Name", "Value"}
	case CellIcon:
		res = []string{"Name", "Icon"}
	case CellInt:
		res = []string{"Name", "Value"}
	case CellString:
		res = []string{"Name", "Value"}
	case DisplayedColumn:
		res = []string{"Name"}
	case Row:
		res = []string{"Name", "Cells"}
	case Table:
		res = []string{"Name", "DisplayedColumns", "Rows", "HasFiltering", "HasColumnSorting", "HasPaginator"}
	}
	return
}

func GetFieldStringValue[Type Gongstruct](instance Type, fieldName string) (res string) {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct field value
	case Cell:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Cell).Name
		case "CellString":
			if any(instance).(Cell).CellString != nil {
				res = any(instance).(Cell).CellString.Name
			}
		case "CellFloat64":
			if any(instance).(Cell).CellFloat64 != nil {
				res = any(instance).(Cell).CellFloat64.Name
			}
		case "CellInt":
			if any(instance).(Cell).CellInt != nil {
				res = any(instance).(Cell).CellInt.Name
			}
		case "CellBool":
			if any(instance).(Cell).CellBool != nil {
				res = any(instance).(Cell).CellBool.Name
			}
		case "CellIcon":
			if any(instance).(Cell).CellIcon != nil {
				res = any(instance).(Cell).CellIcon.Name
			}
		}
	case CellBoolean:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(CellBoolean).Name
		case "Value":
			res = fmt.Sprintf("%t", any(instance).(CellBoolean).Value)
		}
	case CellFloat64:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(CellFloat64).Name
		case "Value":
			res = fmt.Sprintf("%f", any(instance).(CellFloat64).Value)
		}
	case CellIcon:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(CellIcon).Name
		case "Icon":
			res = any(instance).(CellIcon).Icon
		}
	case CellInt:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(CellInt).Name
		case "Value":
			res = fmt.Sprintf("%d", any(instance).(CellInt).Value)
		}
	case CellString:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(CellString).Name
		case "Value":
			res = any(instance).(CellString).Value
		}
	case DisplayedColumn:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(DisplayedColumn).Name
		}
	case Row:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Row).Name
		case "Cells":
			for idx, __instance__ := range any(instance).(Row).Cells {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		}
	case Table:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Table).Name
		case "DisplayedColumns":
			for idx, __instance__ := range any(instance).(Table).DisplayedColumns {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		case "Rows":
			for idx, __instance__ := range any(instance).(Table).Rows {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		case "HasFiltering":
			res = fmt.Sprintf("%t", any(instance).(Table).HasFiltering)
		case "HasColumnSorting":
			res = fmt.Sprintf("%t", any(instance).(Table).HasColumnSorting)
		case "HasPaginator":
			res = fmt.Sprintf("%t", any(instance).(Table).HasPaginator)
		}
	}
	return
}

// Last line of the template
