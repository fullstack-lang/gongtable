// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"sync"
	"time"

	"github.com/fullstack-lang/gongtable/go/models"
	"github.com/fullstack-lang/gongtable/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __FormCell__dummysDeclaration__ models.FormCell
var __FormCell_time__dummyDeclaration time.Duration

var mutexFormCell sync.Mutex

// An FormCellID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getFormCell updateFormCell deleteFormCell
type FormCellID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// FormCellInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postFormCell updateFormCell
type FormCellInput struct {
	// The FormCell to submit or modify
	// in: body
	FormCell *orm.FormCellAPI
}

// GetFormCells
//
// swagger:route GET /formcells formcells getFormCells
//
// # Get all formcells
//
// Responses:
// default: genericError
//
//	200: formcellDBResponse
func (controller *Controller) GetFormCells(c *gin.Context) {

	// source slice
	var formcellDBs []orm.FormCellDB

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetFormCells", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCell.GetDB()

	query := db.Find(&formcellDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	formcellAPIs := make([]orm.FormCellAPI, 0)

	// for each formcell, update fields from the database nullable fields
	for idx := range formcellDBs {
		formcellDB := &formcellDBs[idx]
		_ = formcellDB
		var formcellAPI orm.FormCellAPI

		// insertion point for updating fields
		formcellAPI.ID = formcellDB.ID
		formcellDB.CopyBasicFieldsToFormCell(&formcellAPI.FormCell)
		formcellAPI.FormCellPointersEnconding = formcellDB.FormCellPointersEnconding
		formcellAPIs = append(formcellAPIs, formcellAPI)
	}

	c.JSON(http.StatusOK, formcellAPIs)
}

// PostFormCell
//
// swagger:route POST /formcells formcells postFormCell
//
// Creates a formcell
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func (controller *Controller) PostFormCell(c *gin.Context) {

	mutexFormCell.Lock()

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("PostFormCells", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCell.GetDB()

	// Validate input
	var input orm.FormCellAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create formcell
	formcellDB := orm.FormCellDB{}
	formcellDB.FormCellPointersEnconding = input.FormCellPointersEnconding
	formcellDB.CopyBasicFieldsFromFormCell(&input.FormCell)

	query := db.Create(&formcellDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	backRepo.BackRepoFormCell.CheckoutPhaseOneInstance(&formcellDB)
	formcell := backRepo.BackRepoFormCell.Map_FormCellDBID_FormCellPtr[formcellDB.ID]

	if formcell != nil {
		models.AfterCreateFromFront(backRepo.GetStage(), formcell)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, formcellDB)

	mutexFormCell.Unlock()
}

// GetFormCell
//
// swagger:route GET /formcells/{ID} formcells getFormCell
//
// Gets the details for a formcell.
//
// Responses:
// default: genericError
//
//	200: formcellDBResponse
func (controller *Controller) GetFormCell(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetFormCell", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCell.GetDB()

	// Get formcellDB in DB
	var formcellDB orm.FormCellDB
	if err := db.First(&formcellDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var formcellAPI orm.FormCellAPI
	formcellAPI.ID = formcellDB.ID
	formcellAPI.FormCellPointersEnconding = formcellDB.FormCellPointersEnconding
	formcellDB.CopyBasicFieldsToFormCell(&formcellAPI.FormCell)

	c.JSON(http.StatusOK, formcellAPI)
}

// UpdateFormCell
//
// swagger:route PATCH /formcells/{ID} formcells updateFormCell
//
// # Update a formcell
//
// Responses:
// default: genericError
//
//	200: formcellDBResponse
func (controller *Controller) UpdateFormCell(c *gin.Context) {

	mutexFormCell.Lock()

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("UpdateFormCell", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCell.GetDB()

	// Validate input
	var input orm.FormCellAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// Get model if exist
	var formcellDB orm.FormCellDB

	// fetch the formcell
	query := db.First(&formcellDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// update
	formcellDB.CopyBasicFieldsFromFormCell(&input.FormCell)
	formcellDB.FormCellPointersEnconding = input.FormCellPointersEnconding

	query = db.Model(&formcellDB).Updates(formcellDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	formcellNew := new(models.FormCell)
	formcellDB.CopyBasicFieldsToFormCell(formcellNew)

	// get stage instance from DB instance, and call callback function
	formcellOld := backRepo.BackRepoFormCell.Map_FormCellDBID_FormCellPtr[formcellDB.ID]
	if formcellOld != nil {
		models.AfterUpdateFromFront(backRepo.GetStage(), formcellOld, formcellNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	backRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the formcellDB
	c.JSON(http.StatusOK, formcellDB)

	mutexFormCell.Unlock()
}

// DeleteFormCell
//
// swagger:route DELETE /formcells/{ID} formcells deleteFormCell
//
// # Delete a formcell
//
// default: genericError
//
//	200: formcellDBResponse
func (controller *Controller) DeleteFormCell(c *gin.Context) {

	mutexFormCell.Lock()

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("DeleteFormCell", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCell.GetDB()

	// Get model if exist
	var formcellDB orm.FormCellDB
	if err := db.First(&formcellDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&formcellDB)

	// get an instance (not staged) from DB instance, and call callback function
	formcellDeleted := new(models.FormCell)
	formcellDB.CopyBasicFieldsToFormCell(formcellDeleted)

	// get stage instance from DB instance, and call callback function
	formcellStaged := backRepo.BackRepoFormCell.Map_FormCellDBID_FormCellPtr[formcellDB.ID]
	if formcellStaged != nil {
		models.AfterDeleteFromFront(backRepo.GetStage(), formcellStaged, formcellDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})

	mutexFormCell.Unlock()
}
