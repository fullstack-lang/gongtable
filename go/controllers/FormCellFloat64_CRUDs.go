// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"sync"
	"time"

	"github.com/fullstack-lang/gongtable/go/models"
	"github.com/fullstack-lang/gongtable/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __FormCellFloat64__dummysDeclaration__ models.FormCellFloat64
var __FormCellFloat64_time__dummyDeclaration time.Duration

var mutexFormCellFloat64 sync.Mutex

// An FormCellFloat64ID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getFormCellFloat64 updateFormCellFloat64 deleteFormCellFloat64
type FormCellFloat64ID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// FormCellFloat64Input is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postFormCellFloat64 updateFormCellFloat64
type FormCellFloat64Input struct {
	// The FormCellFloat64 to submit or modify
	// in: body
	FormCellFloat64 *orm.FormCellFloat64API
}

// GetFormCellFloat64s
//
// swagger:route GET /formcellfloat64s formcellfloat64s getFormCellFloat64s
//
// # Get all formcellfloat64s
//
// Responses:
// default: genericError
//
//	200: formcellfloat64DBResponse
func (controller *Controller) GetFormCellFloat64s(c *gin.Context) {

	// source slice
	var formcellfloat64DBs []orm.FormCellFloat64DB

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetFormCellFloat64s", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCellFloat64.GetDB()

	query := db.Find(&formcellfloat64DBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	formcellfloat64APIs := make([]orm.FormCellFloat64API, 0)

	// for each formcellfloat64, update fields from the database nullable fields
	for idx := range formcellfloat64DBs {
		formcellfloat64DB := &formcellfloat64DBs[idx]
		_ = formcellfloat64DB
		var formcellfloat64API orm.FormCellFloat64API

		// insertion point for updating fields
		formcellfloat64API.ID = formcellfloat64DB.ID
		formcellfloat64DB.CopyBasicFieldsToFormCellFloat64(&formcellfloat64API.FormCellFloat64)
		formcellfloat64API.FormCellFloat64PointersEnconding = formcellfloat64DB.FormCellFloat64PointersEnconding
		formcellfloat64APIs = append(formcellfloat64APIs, formcellfloat64API)
	}

	c.JSON(http.StatusOK, formcellfloat64APIs)
}

// PostFormCellFloat64
//
// swagger:route POST /formcellfloat64s formcellfloat64s postFormCellFloat64
//
// Creates a formcellfloat64
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func (controller *Controller) PostFormCellFloat64(c *gin.Context) {

	mutexFormCellFloat64.Lock()

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("PostFormCellFloat64s", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCellFloat64.GetDB()

	// Validate input
	var input orm.FormCellFloat64API

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create formcellfloat64
	formcellfloat64DB := orm.FormCellFloat64DB{}
	formcellfloat64DB.FormCellFloat64PointersEnconding = input.FormCellFloat64PointersEnconding
	formcellfloat64DB.CopyBasicFieldsFromFormCellFloat64(&input.FormCellFloat64)

	query := db.Create(&formcellfloat64DB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	backRepo.BackRepoFormCellFloat64.CheckoutPhaseOneInstance(&formcellfloat64DB)
	formcellfloat64 := backRepo.BackRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64Ptr[formcellfloat64DB.ID]

	if formcellfloat64 != nil {
		models.AfterCreateFromFront(backRepo.GetStage(), formcellfloat64)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, formcellfloat64DB)

	mutexFormCellFloat64.Unlock()
}

// GetFormCellFloat64
//
// swagger:route GET /formcellfloat64s/{ID} formcellfloat64s getFormCellFloat64
//
// Gets the details for a formcellfloat64.
//
// Responses:
// default: genericError
//
//	200: formcellfloat64DBResponse
func (controller *Controller) GetFormCellFloat64(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetFormCellFloat64", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCellFloat64.GetDB()

	// Get formcellfloat64DB in DB
	var formcellfloat64DB orm.FormCellFloat64DB
	if err := db.First(&formcellfloat64DB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var formcellfloat64API orm.FormCellFloat64API
	formcellfloat64API.ID = formcellfloat64DB.ID
	formcellfloat64API.FormCellFloat64PointersEnconding = formcellfloat64DB.FormCellFloat64PointersEnconding
	formcellfloat64DB.CopyBasicFieldsToFormCellFloat64(&formcellfloat64API.FormCellFloat64)

	c.JSON(http.StatusOK, formcellfloat64API)
}

// UpdateFormCellFloat64
//
// swagger:route PATCH /formcellfloat64s/{ID} formcellfloat64s updateFormCellFloat64
//
// # Update a formcellfloat64
//
// Responses:
// default: genericError
//
//	200: formcellfloat64DBResponse
func (controller *Controller) UpdateFormCellFloat64(c *gin.Context) {

	mutexFormCellFloat64.Lock()

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("UpdateFormCellFloat64", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCellFloat64.GetDB()

	// Validate input
	var input orm.FormCellFloat64API
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// Get model if exist
	var formcellfloat64DB orm.FormCellFloat64DB

	// fetch the formcellfloat64
	query := db.First(&formcellfloat64DB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// update
	formcellfloat64DB.CopyBasicFieldsFromFormCellFloat64(&input.FormCellFloat64)
	formcellfloat64DB.FormCellFloat64PointersEnconding = input.FormCellFloat64PointersEnconding

	query = db.Model(&formcellfloat64DB).Updates(formcellfloat64DB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	formcellfloat64New := new(models.FormCellFloat64)
	formcellfloat64DB.CopyBasicFieldsToFormCellFloat64(formcellfloat64New)

	// get stage instance from DB instance, and call callback function
	formcellfloat64Old := backRepo.BackRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64Ptr[formcellfloat64DB.ID]
	if formcellfloat64Old != nil {
		models.AfterUpdateFromFront(backRepo.GetStage(), formcellfloat64Old, formcellfloat64New)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	backRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the formcellfloat64DB
	c.JSON(http.StatusOK, formcellfloat64DB)

	mutexFormCellFloat64.Unlock()
}

// DeleteFormCellFloat64
//
// swagger:route DELETE /formcellfloat64s/{ID} formcellfloat64s deleteFormCellFloat64
//
// # Delete a formcellfloat64
//
// default: genericError
//
//	200: formcellfloat64DBResponse
func (controller *Controller) DeleteFormCellFloat64(c *gin.Context) {

	mutexFormCellFloat64.Lock()

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("DeleteFormCellFloat64", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCellFloat64.GetDB()

	// Get model if exist
	var formcellfloat64DB orm.FormCellFloat64DB
	if err := db.First(&formcellfloat64DB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&formcellfloat64DB)

	// get an instance (not staged) from DB instance, and call callback function
	formcellfloat64Deleted := new(models.FormCellFloat64)
	formcellfloat64DB.CopyBasicFieldsToFormCellFloat64(formcellfloat64Deleted)

	// get stage instance from DB instance, and call callback function
	formcellfloat64Staged := backRepo.BackRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64Ptr[formcellfloat64DB.ID]
	if formcellfloat64Staged != nil {
		models.AfterDeleteFromFront(backRepo.GetStage(), formcellfloat64Staged, formcellfloat64Deleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})

	mutexFormCellFloat64.Unlock()
}
