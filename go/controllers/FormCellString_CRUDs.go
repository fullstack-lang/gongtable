// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"sync"
	"time"

	"github.com/fullstack-lang/gongtable/go/models"
	"github.com/fullstack-lang/gongtable/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __FormCellString__dummysDeclaration__ models.FormCellString
var __FormCellString_time__dummyDeclaration time.Duration

var mutexFormCellString sync.Mutex

// An FormCellStringID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getFormCellString updateFormCellString deleteFormCellString
type FormCellStringID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// FormCellStringInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postFormCellString updateFormCellString
type FormCellStringInput struct {
	// The FormCellString to submit or modify
	// in: body
	FormCellString *orm.FormCellStringAPI
}

// GetFormCellStrings
//
// swagger:route GET /formcellstrings formcellstrings getFormCellStrings
//
// # Get all formcellstrings
//
// Responses:
// default: genericError
//
//	200: formcellstringDBResponse
func (controller *Controller) GetFormCellStrings(c *gin.Context) {

	// source slice
	var formcellstringDBs []orm.FormCellStringDB

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetFormCellStrings", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCellString.GetDB()

	query := db.Find(&formcellstringDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	formcellstringAPIs := make([]orm.FormCellStringAPI, 0)

	// for each formcellstring, update fields from the database nullable fields
	for idx := range formcellstringDBs {
		formcellstringDB := &formcellstringDBs[idx]
		_ = formcellstringDB
		var formcellstringAPI orm.FormCellStringAPI

		// insertion point for updating fields
		formcellstringAPI.ID = formcellstringDB.ID
		formcellstringDB.CopyBasicFieldsToFormCellString(&formcellstringAPI.FormCellString)
		formcellstringAPI.FormCellStringPointersEnconding = formcellstringDB.FormCellStringPointersEnconding
		formcellstringAPIs = append(formcellstringAPIs, formcellstringAPI)
	}

	c.JSON(http.StatusOK, formcellstringAPIs)
}

// PostFormCellString
//
// swagger:route POST /formcellstrings formcellstrings postFormCellString
//
// Creates a formcellstring
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func (controller *Controller) PostFormCellString(c *gin.Context) {

	mutexFormCellString.Lock()

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("PostFormCellStrings", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCellString.GetDB()

	// Validate input
	var input orm.FormCellStringAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create formcellstring
	formcellstringDB := orm.FormCellStringDB{}
	formcellstringDB.FormCellStringPointersEnconding = input.FormCellStringPointersEnconding
	formcellstringDB.CopyBasicFieldsFromFormCellString(&input.FormCellString)

	query := db.Create(&formcellstringDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	backRepo.BackRepoFormCellString.CheckoutPhaseOneInstance(&formcellstringDB)
	formcellstring := backRepo.BackRepoFormCellString.Map_FormCellStringDBID_FormCellStringPtr[formcellstringDB.ID]

	if formcellstring != nil {
		models.AfterCreateFromFront(backRepo.GetStage(), formcellstring)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, formcellstringDB)

	mutexFormCellString.Unlock()
}

// GetFormCellString
//
// swagger:route GET /formcellstrings/{ID} formcellstrings getFormCellString
//
// Gets the details for a formcellstring.
//
// Responses:
// default: genericError
//
//	200: formcellstringDBResponse
func (controller *Controller) GetFormCellString(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetFormCellString", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCellString.GetDB()

	// Get formcellstringDB in DB
	var formcellstringDB orm.FormCellStringDB
	if err := db.First(&formcellstringDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var formcellstringAPI orm.FormCellStringAPI
	formcellstringAPI.ID = formcellstringDB.ID
	formcellstringAPI.FormCellStringPointersEnconding = formcellstringDB.FormCellStringPointersEnconding
	formcellstringDB.CopyBasicFieldsToFormCellString(&formcellstringAPI.FormCellString)

	c.JSON(http.StatusOK, formcellstringAPI)
}

// UpdateFormCellString
//
// swagger:route PATCH /formcellstrings/{ID} formcellstrings updateFormCellString
//
// # Update a formcellstring
//
// Responses:
// default: genericError
//
//	200: formcellstringDBResponse
func (controller *Controller) UpdateFormCellString(c *gin.Context) {

	mutexFormCellString.Lock()

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("UpdateFormCellString", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCellString.GetDB()

	// Validate input
	var input orm.FormCellStringAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// Get model if exist
	var formcellstringDB orm.FormCellStringDB

	// fetch the formcellstring
	query := db.First(&formcellstringDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// update
	formcellstringDB.CopyBasicFieldsFromFormCellString(&input.FormCellString)
	formcellstringDB.FormCellStringPointersEnconding = input.FormCellStringPointersEnconding

	query = db.Model(&formcellstringDB).Updates(formcellstringDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	formcellstringNew := new(models.FormCellString)
	formcellstringDB.CopyBasicFieldsToFormCellString(formcellstringNew)

	// get stage instance from DB instance, and call callback function
	formcellstringOld := backRepo.BackRepoFormCellString.Map_FormCellStringDBID_FormCellStringPtr[formcellstringDB.ID]
	if formcellstringOld != nil {
		models.AfterUpdateFromFront(backRepo.GetStage(), formcellstringOld, formcellstringNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	backRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the formcellstringDB
	c.JSON(http.StatusOK, formcellstringDB)

	mutexFormCellString.Unlock()
}

// DeleteFormCellString
//
// swagger:route DELETE /formcellstrings/{ID} formcellstrings deleteFormCellString
//
// # Delete a formcellstring
//
// default: genericError
//
//	200: formcellstringDBResponse
func (controller *Controller) DeleteFormCellString(c *gin.Context) {

	mutexFormCellString.Lock()

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("DeleteFormCellString", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCellString.GetDB()

	// Get model if exist
	var formcellstringDB orm.FormCellStringDB
	if err := db.First(&formcellstringDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&formcellstringDB)

	// get an instance (not staged) from DB instance, and call callback function
	formcellstringDeleted := new(models.FormCellString)
	formcellstringDB.CopyBasicFieldsToFormCellString(formcellstringDeleted)

	// get stage instance from DB instance, and call callback function
	formcellstringStaged := backRepo.BackRepoFormCellString.Map_FormCellStringDBID_FormCellStringPtr[formcellstringDB.ID]
	if formcellstringStaged != nil {
		models.AfterDeleteFromFront(backRepo.GetStage(), formcellstringStaged, formcellstringDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})

	mutexFormCellString.Unlock()
}
