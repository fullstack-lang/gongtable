// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"sync"
	"time"

	"github.com/fullstack-lang/gongtable/go/models"
	"github.com/fullstack-lang/gongtable/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __FormFieldBoolean__dummysDeclaration__ models.FormFieldBoolean
var __FormFieldBoolean_time__dummyDeclaration time.Duration

var mutexFormFieldBoolean sync.Mutex

// An FormFieldBooleanID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getFormFieldBoolean updateFormFieldBoolean deleteFormFieldBoolean
type FormFieldBooleanID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// FormFieldBooleanInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postFormFieldBoolean updateFormFieldBoolean
type FormFieldBooleanInput struct {
	// The FormFieldBoolean to submit or modify
	// in: body
	FormFieldBoolean *orm.FormFieldBooleanAPI
}

// GetFormFieldBooleans
//
// swagger:route GET /formfieldbooleans formfieldbooleans getFormFieldBooleans
//
// # Get all formfieldbooleans
//
// Responses:
// default: genericError
//
//	200: formfieldbooleanDBResponse
func (controller *Controller) GetFormFieldBooleans(c *gin.Context) {

	// source slice
	var formfieldbooleanDBs []orm.FormFieldBooleanDB

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetFormFieldBooleans", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormFieldBoolean.GetDB()

	query := db.Find(&formfieldbooleanDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	formfieldbooleanAPIs := make([]orm.FormFieldBooleanAPI, 0)

	// for each formfieldboolean, update fields from the database nullable fields
	for idx := range formfieldbooleanDBs {
		formfieldbooleanDB := &formfieldbooleanDBs[idx]
		_ = formfieldbooleanDB
		var formfieldbooleanAPI orm.FormFieldBooleanAPI

		// insertion point for updating fields
		formfieldbooleanAPI.ID = formfieldbooleanDB.ID
		formfieldbooleanDB.CopyBasicFieldsToFormFieldBoolean(&formfieldbooleanAPI.FormFieldBoolean)
		formfieldbooleanAPI.FormFieldBooleanPointersEnconding = formfieldbooleanDB.FormFieldBooleanPointersEnconding
		formfieldbooleanAPIs = append(formfieldbooleanAPIs, formfieldbooleanAPI)
	}

	c.JSON(http.StatusOK, formfieldbooleanAPIs)
}

// PostFormFieldBoolean
//
// swagger:route POST /formfieldbooleans formfieldbooleans postFormFieldBoolean
//
// Creates a formfieldboolean
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func (controller *Controller) PostFormFieldBoolean(c *gin.Context) {

	mutexFormFieldBoolean.Lock()

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("PostFormFieldBooleans", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormFieldBoolean.GetDB()

	// Validate input
	var input orm.FormFieldBooleanAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create formfieldboolean
	formfieldbooleanDB := orm.FormFieldBooleanDB{}
	formfieldbooleanDB.FormFieldBooleanPointersEnconding = input.FormFieldBooleanPointersEnconding
	formfieldbooleanDB.CopyBasicFieldsFromFormFieldBoolean(&input.FormFieldBoolean)

	query := db.Create(&formfieldbooleanDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	backRepo.BackRepoFormFieldBoolean.CheckoutPhaseOneInstance(&formfieldbooleanDB)
	formfieldboolean := backRepo.BackRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanPtr[formfieldbooleanDB.ID]

	if formfieldboolean != nil {
		models.AfterCreateFromFront(backRepo.GetStage(), formfieldboolean)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, formfieldbooleanDB)

	mutexFormFieldBoolean.Unlock()
}

// GetFormFieldBoolean
//
// swagger:route GET /formfieldbooleans/{ID} formfieldbooleans getFormFieldBoolean
//
// Gets the details for a formfieldboolean.
//
// Responses:
// default: genericError
//
//	200: formfieldbooleanDBResponse
func (controller *Controller) GetFormFieldBoolean(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetFormFieldBoolean", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormFieldBoolean.GetDB()

	// Get formfieldbooleanDB in DB
	var formfieldbooleanDB orm.FormFieldBooleanDB
	if err := db.First(&formfieldbooleanDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var formfieldbooleanAPI orm.FormFieldBooleanAPI
	formfieldbooleanAPI.ID = formfieldbooleanDB.ID
	formfieldbooleanAPI.FormFieldBooleanPointersEnconding = formfieldbooleanDB.FormFieldBooleanPointersEnconding
	formfieldbooleanDB.CopyBasicFieldsToFormFieldBoolean(&formfieldbooleanAPI.FormFieldBoolean)

	c.JSON(http.StatusOK, formfieldbooleanAPI)
}

// UpdateFormFieldBoolean
//
// swagger:route PATCH /formfieldbooleans/{ID} formfieldbooleans updateFormFieldBoolean
//
// # Update a formfieldboolean
//
// Responses:
// default: genericError
//
//	200: formfieldbooleanDBResponse
func (controller *Controller) UpdateFormFieldBoolean(c *gin.Context) {

	mutexFormFieldBoolean.Lock()

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("UpdateFormFieldBoolean", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormFieldBoolean.GetDB()

	// Validate input
	var input orm.FormFieldBooleanAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// Get model if exist
	var formfieldbooleanDB orm.FormFieldBooleanDB

	// fetch the formfieldboolean
	query := db.First(&formfieldbooleanDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// update
	formfieldbooleanDB.CopyBasicFieldsFromFormFieldBoolean(&input.FormFieldBoolean)
	formfieldbooleanDB.FormFieldBooleanPointersEnconding = input.FormFieldBooleanPointersEnconding

	query = db.Model(&formfieldbooleanDB).Updates(formfieldbooleanDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	formfieldbooleanNew := new(models.FormFieldBoolean)
	formfieldbooleanDB.CopyBasicFieldsToFormFieldBoolean(formfieldbooleanNew)

	// get stage instance from DB instance, and call callback function
	formfieldbooleanOld := backRepo.BackRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanPtr[formfieldbooleanDB.ID]
	if formfieldbooleanOld != nil {
		models.AfterUpdateFromFront(backRepo.GetStage(), formfieldbooleanOld, formfieldbooleanNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	backRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the formfieldbooleanDB
	c.JSON(http.StatusOK, formfieldbooleanDB)

	mutexFormFieldBoolean.Unlock()
}

// DeleteFormFieldBoolean
//
// swagger:route DELETE /formfieldbooleans/{ID} formfieldbooleans deleteFormFieldBoolean
//
// # Delete a formfieldboolean
//
// default: genericError
//
//	200: formfieldbooleanDBResponse
func (controller *Controller) DeleteFormFieldBoolean(c *gin.Context) {

	mutexFormFieldBoolean.Lock()

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("DeleteFormFieldBoolean", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormFieldBoolean.GetDB()

	// Get model if exist
	var formfieldbooleanDB orm.FormFieldBooleanDB
	if err := db.First(&formfieldbooleanDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&formfieldbooleanDB)

	// get an instance (not staged) from DB instance, and call callback function
	formfieldbooleanDeleted := new(models.FormFieldBoolean)
	formfieldbooleanDB.CopyBasicFieldsToFormFieldBoolean(formfieldbooleanDeleted)

	// get stage instance from DB instance, and call callback function
	formfieldbooleanStaged := backRepo.BackRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanPtr[formfieldbooleanDB.ID]
	if formfieldbooleanStaged != nil {
		models.AfterDeleteFromFront(backRepo.GetStage(), formfieldbooleanStaged, formfieldbooleanDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})

	mutexFormFieldBoolean.Unlock()
}
