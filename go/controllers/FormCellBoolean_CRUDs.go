// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"sync"
	"time"

	"github.com/fullstack-lang/gongtable/go/models"
	"github.com/fullstack-lang/gongtable/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __FormCellBoolean__dummysDeclaration__ models.FormCellBoolean
var __FormCellBoolean_time__dummyDeclaration time.Duration

var mutexFormCellBoolean sync.Mutex

// An FormCellBooleanID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getFormCellBoolean updateFormCellBoolean deleteFormCellBoolean
type FormCellBooleanID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// FormCellBooleanInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postFormCellBoolean updateFormCellBoolean
type FormCellBooleanInput struct {
	// The FormCellBoolean to submit or modify
	// in: body
	FormCellBoolean *orm.FormCellBooleanAPI
}

// GetFormCellBooleans
//
// swagger:route GET /formcellbooleans formcellbooleans getFormCellBooleans
//
// # Get all formcellbooleans
//
// Responses:
// default: genericError
//
//	200: formcellbooleanDBResponse
func (controller *Controller) GetFormCellBooleans(c *gin.Context) {

	// source slice
	var formcellbooleanDBs []orm.FormCellBooleanDB

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetFormCellBooleans", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCellBoolean.GetDB()

	query := db.Find(&formcellbooleanDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	formcellbooleanAPIs := make([]orm.FormCellBooleanAPI, 0)

	// for each formcellboolean, update fields from the database nullable fields
	for idx := range formcellbooleanDBs {
		formcellbooleanDB := &formcellbooleanDBs[idx]
		_ = formcellbooleanDB
		var formcellbooleanAPI orm.FormCellBooleanAPI

		// insertion point for updating fields
		formcellbooleanAPI.ID = formcellbooleanDB.ID
		formcellbooleanDB.CopyBasicFieldsToFormCellBoolean(&formcellbooleanAPI.FormCellBoolean)
		formcellbooleanAPI.FormCellBooleanPointersEnconding = formcellbooleanDB.FormCellBooleanPointersEnconding
		formcellbooleanAPIs = append(formcellbooleanAPIs, formcellbooleanAPI)
	}

	c.JSON(http.StatusOK, formcellbooleanAPIs)
}

// PostFormCellBoolean
//
// swagger:route POST /formcellbooleans formcellbooleans postFormCellBoolean
//
// Creates a formcellboolean
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func (controller *Controller) PostFormCellBoolean(c *gin.Context) {

	mutexFormCellBoolean.Lock()

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("PostFormCellBooleans", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCellBoolean.GetDB()

	// Validate input
	var input orm.FormCellBooleanAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create formcellboolean
	formcellbooleanDB := orm.FormCellBooleanDB{}
	formcellbooleanDB.FormCellBooleanPointersEnconding = input.FormCellBooleanPointersEnconding
	formcellbooleanDB.CopyBasicFieldsFromFormCellBoolean(&input.FormCellBoolean)

	query := db.Create(&formcellbooleanDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	backRepo.BackRepoFormCellBoolean.CheckoutPhaseOneInstance(&formcellbooleanDB)
	formcellboolean := backRepo.BackRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanPtr[formcellbooleanDB.ID]

	if formcellboolean != nil {
		models.AfterCreateFromFront(backRepo.GetStage(), formcellboolean)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, formcellbooleanDB)

	mutexFormCellBoolean.Unlock()
}

// GetFormCellBoolean
//
// swagger:route GET /formcellbooleans/{ID} formcellbooleans getFormCellBoolean
//
// Gets the details for a formcellboolean.
//
// Responses:
// default: genericError
//
//	200: formcellbooleanDBResponse
func (controller *Controller) GetFormCellBoolean(c *gin.Context) {

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("GetFormCellBoolean", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCellBoolean.GetDB()

	// Get formcellbooleanDB in DB
	var formcellbooleanDB orm.FormCellBooleanDB
	if err := db.First(&formcellbooleanDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var formcellbooleanAPI orm.FormCellBooleanAPI
	formcellbooleanAPI.ID = formcellbooleanDB.ID
	formcellbooleanAPI.FormCellBooleanPointersEnconding = formcellbooleanDB.FormCellBooleanPointersEnconding
	formcellbooleanDB.CopyBasicFieldsToFormCellBoolean(&formcellbooleanAPI.FormCellBoolean)

	c.JSON(http.StatusOK, formcellbooleanAPI)
}

// UpdateFormCellBoolean
//
// swagger:route PATCH /formcellbooleans/{ID} formcellbooleans updateFormCellBoolean
//
// # Update a formcellboolean
//
// Responses:
// default: genericError
//
//	200: formcellbooleanDBResponse
func (controller *Controller) UpdateFormCellBoolean(c *gin.Context) {

	mutexFormCellBoolean.Lock()

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("UpdateFormCellBoolean", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCellBoolean.GetDB()

	// Validate input
	var input orm.FormCellBooleanAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// Get model if exist
	var formcellbooleanDB orm.FormCellBooleanDB

	// fetch the formcellboolean
	query := db.First(&formcellbooleanDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// update
	formcellbooleanDB.CopyBasicFieldsFromFormCellBoolean(&input.FormCellBoolean)
	formcellbooleanDB.FormCellBooleanPointersEnconding = input.FormCellBooleanPointersEnconding

	query = db.Model(&formcellbooleanDB).Updates(formcellbooleanDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	formcellbooleanNew := new(models.FormCellBoolean)
	formcellbooleanDB.CopyBasicFieldsToFormCellBoolean(formcellbooleanNew)

	// get stage instance from DB instance, and call callback function
	formcellbooleanOld := backRepo.BackRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanPtr[formcellbooleanDB.ID]
	if formcellbooleanOld != nil {
		models.AfterUpdateFromFront(backRepo.GetStage(), formcellbooleanOld, formcellbooleanNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	backRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the formcellbooleanDB
	c.JSON(http.StatusOK, formcellbooleanDB)

	mutexFormCellBoolean.Unlock()
}

// DeleteFormCellBoolean
//
// swagger:route DELETE /formcellbooleans/{ID} formcellbooleans deleteFormCellBoolean
//
// # Delete a formcellboolean
//
// default: genericError
//
//	200: formcellbooleanDBResponse
func (controller *Controller) DeleteFormCellBoolean(c *gin.Context) {

	mutexFormCellBoolean.Lock()

	values := c.Request.URL.Query()
	stackPath := ""
	if len(values) == 1 {
		value := values["GONG__StackPath"]
		if len(value) == 1 {
			stackPath = value[0]
			// log.Println("DeleteFormCellBoolean", "GONG__StackPath", stackPath)
		}
	}
	backRepo := controller.Map_BackRepos[stackPath]
	db := backRepo.BackRepoFormCellBoolean.GetDB()

	// Get model if exist
	var formcellbooleanDB orm.FormCellBooleanDB
	if err := db.First(&formcellbooleanDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&formcellbooleanDB)

	// get an instance (not staged) from DB instance, and call callback function
	formcellbooleanDeleted := new(models.FormCellBoolean)
	formcellbooleanDB.CopyBasicFieldsToFormCellBoolean(formcellbooleanDeleted)

	// get stage instance from DB instance, and call callback function
	formcellbooleanStaged := backRepo.BackRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanPtr[formcellbooleanDB.ID]
	if formcellbooleanStaged != nil {
		models.AfterDeleteFromFront(backRepo.GetStage(), formcellbooleanStaged, formcellbooleanDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	backRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})

	mutexFormCellBoolean.Unlock()
}
