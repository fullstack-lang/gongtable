// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongtable/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Form_sql sql.NullBool
var dummy_Form_time time.Duration
var dummy_Form_sort sort.Float64Slice

// FormAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model formAPI
type FormAPI struct {
	gorm.Model

	models.Form

	// encoding of pointers
	FormPointersEnconding
}

// FormPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FormPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// FormDB describes a form in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model formDB
type FormDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field formDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	FormPointersEnconding
}

// FormDBs arrays formDBs
// swagger:response formDBsResponse
type FormDBs []FormDB

// FormDBResponse provides response
// swagger:response formDBResponse
type FormDBResponse struct {
	FormDB
}

// FormWOP is a Form without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FormWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Form_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoFormStruct struct {
	// stores FormDB according to their gorm ID
	Map_FormDBID_FormDB map[uint]*FormDB

	// stores FormDB ID according to Form address
	Map_FormPtr_FormDBID map[*models.Form]uint

	// stores Form according to their gorm ID
	Map_FormDBID_FormPtr map[uint]*models.Form

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoForm *BackRepoFormStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoForm.stage
	return
}

func (backRepoForm *BackRepoFormStruct) GetDB() *gorm.DB {
	return backRepoForm.db
}

// GetFormDBFromFormPtr is a handy function to access the back repo instance from the stage instance
func (backRepoForm *BackRepoFormStruct) GetFormDBFromFormPtr(form *models.Form) (formDB *FormDB) {
	id := backRepoForm.Map_FormPtr_FormDBID[form]
	formDB = backRepoForm.Map_FormDBID_FormDB[id]
	return
}

// BackRepoForm.CommitPhaseOne commits all staged instances of Form to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoForm *BackRepoFormStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for form := range stage.Forms {
		backRepoForm.CommitPhaseOneInstance(form)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, form := range backRepoForm.Map_FormDBID_FormPtr {
		if _, ok := stage.Forms[form]; !ok {
			backRepoForm.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoForm.CommitDeleteInstance commits deletion of Form to the BackRepo
func (backRepoForm *BackRepoFormStruct) CommitDeleteInstance(id uint) (Error error) {

	form := backRepoForm.Map_FormDBID_FormPtr[id]

	// form is not staged anymore, remove formDB
	formDB := backRepoForm.Map_FormDBID_FormDB[id]
	query := backRepoForm.db.Unscoped().Delete(&formDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoForm.Map_FormPtr_FormDBID, form)
	delete(backRepoForm.Map_FormDBID_FormPtr, id)
	delete(backRepoForm.Map_FormDBID_FormDB, id)

	return
}

// BackRepoForm.CommitPhaseOneInstance commits form staged instances of Form to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoForm *BackRepoFormStruct) CommitPhaseOneInstance(form *models.Form) (Error error) {

	// check if the form is not commited yet
	if _, ok := backRepoForm.Map_FormPtr_FormDBID[form]; ok {
		return
	}

	// initiate form
	var formDB FormDB
	formDB.CopyBasicFieldsFromForm(form)

	query := backRepoForm.db.Create(&formDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoForm.Map_FormPtr_FormDBID[form] = formDB.ID
	backRepoForm.Map_FormDBID_FormPtr[formDB.ID] = form
	backRepoForm.Map_FormDBID_FormDB[formDB.ID] = &formDB

	return
}

// BackRepoForm.CommitPhaseTwo commits all staged instances of Form to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoForm *BackRepoFormStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, form := range backRepoForm.Map_FormDBID_FormPtr {
		backRepoForm.CommitPhaseTwoInstance(backRepo, idx, form)
	}

	return
}

// BackRepoForm.CommitPhaseTwoInstance commits {{structname }} of models.Form to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoForm *BackRepoFormStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, form *models.Form) (Error error) {

	// fetch matching formDB
	if formDB, ok := backRepoForm.Map_FormDBID_FormDB[idx]; ok {

		formDB.CopyBasicFieldsFromForm(form)

		// insertion point for translating pointers encodings into actual pointers
		// This loop encodes the slice of pointers form.FormCells into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, formcellAssocEnd := range form.FormCells {

			// get the back repo instance at the association end
			formcellAssocEnd_DB :=
				backRepo.BackRepoFormCell.GetFormCellDBFromFormCellPtr(formcellAssocEnd)

			// encode reverse pointer in the association end back repo instance
			formcellAssocEnd_DB.Form_FormCellsDBID.Int64 = int64(formDB.ID)
			formcellAssocEnd_DB.Form_FormCellsDBID.Valid = true
			formcellAssocEnd_DB.Form_FormCellsDBID_Index.Int64 = int64(idx)
			formcellAssocEnd_DB.Form_FormCellsDBID_Index.Valid = true
			if q := backRepoForm.db.Save(formcellAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoForm.db.Save(&formDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Form intance %s", form.Name))
		return err
	}

	return
}

// BackRepoForm.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoForm *BackRepoFormStruct) CheckoutPhaseOne() (Error error) {

	formDBArray := make([]FormDB, 0)
	query := backRepoForm.db.Find(&formDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	formInstancesToBeRemovedFromTheStage := make(map[*models.Form]any)
	for key, value := range backRepoForm.stage.Forms {
		formInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, formDB := range formDBArray {
		backRepoForm.CheckoutPhaseOneInstance(&formDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		form, ok := backRepoForm.Map_FormDBID_FormPtr[formDB.ID]
		if ok {
			delete(formInstancesToBeRemovedFromTheStage, form)
		}
	}

	// remove from stage and back repo's 3 maps all forms that are not in the checkout
	for form := range formInstancesToBeRemovedFromTheStage {
		form.Unstage(backRepoForm.GetStage())

		// remove instance from the back repo 3 maps
		formID := backRepoForm.Map_FormPtr_FormDBID[form]
		delete(backRepoForm.Map_FormPtr_FormDBID, form)
		delete(backRepoForm.Map_FormDBID_FormDB, formID)
		delete(backRepoForm.Map_FormDBID_FormPtr, formID)
	}

	return
}

// CheckoutPhaseOneInstance takes a formDB that has been found in the DB, updates the backRepo and stages the
// models version of the formDB
func (backRepoForm *BackRepoFormStruct) CheckoutPhaseOneInstance(formDB *FormDB) (Error error) {

	form, ok := backRepoForm.Map_FormDBID_FormPtr[formDB.ID]
	if !ok {
		form = new(models.Form)

		backRepoForm.Map_FormDBID_FormPtr[formDB.ID] = form
		backRepoForm.Map_FormPtr_FormDBID[form] = formDB.ID

		// append model store with the new element
		form.Name = formDB.Name_Data.String
		form.Stage(backRepoForm.GetStage())
	}
	formDB.CopyBasicFieldsToForm(form)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	form.Stage(backRepoForm.GetStage())

	// preserve pointer to formDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FormDBID_FormDB)[formDB hold variable pointers
	formDB_Data := *formDB
	preservedPtrToForm := &formDB_Data
	backRepoForm.Map_FormDBID_FormDB[formDB.ID] = preservedPtrToForm

	return
}

// BackRepoForm.CheckoutPhaseTwo Checkouts all staged instances of Form to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoForm *BackRepoFormStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, formDB := range backRepoForm.Map_FormDBID_FormDB {
		backRepoForm.CheckoutPhaseTwoInstance(backRepo, formDB)
	}
	return
}

// BackRepoForm.CheckoutPhaseTwoInstance Checkouts staged instances of Form to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoForm *BackRepoFormStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, formDB *FormDB) (Error error) {

	form := backRepoForm.Map_FormDBID_FormPtr[formDB.ID]
	_ = form // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// This loop redeem form.FormCells in the stage from the encode in the back repo
	// It parses all FormCellDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	form.FormCells = form.FormCells[:0]
	// 2. loop all instances in the type in the association end
	for _, formcellDB_AssocEnd := range backRepo.BackRepoFormCell.Map_FormCellDBID_FormCellDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if formcellDB_AssocEnd.Form_FormCellsDBID.Int64 == int64(formDB.ID) {
			// 4. fetch the associated instance in the stage
			formcell_AssocEnd := backRepo.BackRepoFormCell.Map_FormCellDBID_FormCellPtr[formcellDB_AssocEnd.ID]
			// 5. append it the association slice
			form.FormCells = append(form.FormCells, formcell_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(form.FormCells, func(i, j int) bool {
		formcellDB_i_ID := backRepo.BackRepoFormCell.Map_FormCellPtr_FormCellDBID[form.FormCells[i]]
		formcellDB_j_ID := backRepo.BackRepoFormCell.Map_FormCellPtr_FormCellDBID[form.FormCells[j]]

		formcellDB_i := backRepo.BackRepoFormCell.Map_FormCellDBID_FormCellDB[formcellDB_i_ID]
		formcellDB_j := backRepo.BackRepoFormCell.Map_FormCellDBID_FormCellDB[formcellDB_j_ID]

		return formcellDB_i.Form_FormCellsDBID_Index.Int64 < formcellDB_j.Form_FormCellsDBID_Index.Int64
	})

	return
}

// CommitForm allows commit of a single form (if already staged)
func (backRepo *BackRepoStruct) CommitForm(form *models.Form) {
	backRepo.BackRepoForm.CommitPhaseOneInstance(form)
	if id, ok := backRepo.BackRepoForm.Map_FormPtr_FormDBID[form]; ok {
		backRepo.BackRepoForm.CommitPhaseTwoInstance(backRepo, id, form)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitForm allows checkout of a single form (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutForm(form *models.Form) {
	// check if the form is staged
	if _, ok := backRepo.BackRepoForm.Map_FormPtr_FormDBID[form]; ok {

		if id, ok := backRepo.BackRepoForm.Map_FormPtr_FormDBID[form]; ok {
			var formDB FormDB
			formDB.ID = id

			if err := backRepo.BackRepoForm.db.First(&formDB, id).Error; err != nil {
				log.Panicln("CheckoutForm : Problem with getting object with id:", id)
			}
			backRepo.BackRepoForm.CheckoutPhaseOneInstance(&formDB)
			backRepo.BackRepoForm.CheckoutPhaseTwoInstance(backRepo, &formDB)
		}
	}
}

// CopyBasicFieldsFromForm
func (formDB *FormDB) CopyBasicFieldsFromForm(form *models.Form) {
	// insertion point for fields commit

	formDB.Name_Data.String = form.Name
	formDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromFormWOP
func (formDB *FormDB) CopyBasicFieldsFromFormWOP(form *FormWOP) {
	// insertion point for fields commit

	formDB.Name_Data.String = form.Name
	formDB.Name_Data.Valid = true
}

// CopyBasicFieldsToForm
func (formDB *FormDB) CopyBasicFieldsToForm(form *models.Form) {
	// insertion point for checkout of basic fields (back repo to stage)
	form.Name = formDB.Name_Data.String
}

// CopyBasicFieldsToFormWOP
func (formDB *FormDB) CopyBasicFieldsToFormWOP(form *FormWOP) {
	form.ID = int(formDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	form.Name = formDB.Name_Data.String
}

// Backup generates a json file from a slice of all FormDB instances in the backrepo
func (backRepoForm *BackRepoFormStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FormDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormDB, 0)
	for _, formDB := range backRepoForm.Map_FormDBID_FormDB {
		forBackup = append(forBackup, formDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Form ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Form file", err.Error())
	}
}

// Backup generates a json file from a slice of all FormDB instances in the backrepo
func (backRepoForm *BackRepoFormStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormDB, 0)
	for _, formDB := range backRepoForm.Map_FormDBID_FormDB {
		forBackup = append(forBackup, formDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Form")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Form_Fields, -1)
	for _, formDB := range forBackup {

		var formWOP FormWOP
		formDB.CopyBasicFieldsToFormWOP(&formWOP)

		row := sh.AddRow()
		row.WriteStruct(&formWOP, -1)
	}
}

// RestoreXL from the "Form" sheet all FormDB instances
func (backRepoForm *BackRepoFormStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFormid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Form"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoForm.rowVisitorForm)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoForm *BackRepoFormStruct) rowVisitorForm(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var formWOP FormWOP
		row.ReadStruct(&formWOP)

		// add the unmarshalled struct to the stage
		formDB := new(FormDB)
		formDB.CopyBasicFieldsFromFormWOP(&formWOP)

		formDB_ID_atBackupTime := formDB.ID
		formDB.ID = 0
		query := backRepoForm.db.Create(formDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoForm.Map_FormDBID_FormDB[formDB.ID] = formDB
		BackRepoFormid_atBckpTime_newID[formDB_ID_atBackupTime] = formDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FormDB.json" in dirPath that stores an array
// of FormDB and stores it in the database
// the map BackRepoFormid_atBckpTime_newID is updated accordingly
func (backRepoForm *BackRepoFormStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFormid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FormDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Form file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FormDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FormDBID_FormDB
	for _, formDB := range forRestore {

		formDB_ID_atBackupTime := formDB.ID
		formDB.ID = 0
		query := backRepoForm.db.Create(formDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoForm.Map_FormDBID_FormDB[formDB.ID] = formDB
		BackRepoFormid_atBckpTime_newID[formDB_ID_atBackupTime] = formDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Form file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Form>id_atBckpTime_newID
// to compute new index
func (backRepoForm *BackRepoFormStruct) RestorePhaseTwo() {

	for _, formDB := range backRepoForm.Map_FormDBID_FormDB {

		// next line of code is to avert unused variable compilation error
		_ = formDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoForm.db.Model(formDB).Updates(*formDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFormid_atBckpTime_newID map[uint]uint
