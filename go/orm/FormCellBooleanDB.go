// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongtable/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_FormCellBoolean_sql sql.NullBool
var dummy_FormCellBoolean_time time.Duration
var dummy_FormCellBoolean_sort sort.Float64Slice

// FormCellBooleanAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model formcellbooleanAPI
type FormCellBooleanAPI struct {
	gorm.Model

	models.FormCellBoolean

	// encoding of pointers
	FormCellBooleanPointersEnconding
}

// FormCellBooleanPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FormCellBooleanPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// FormCellBooleanDB describes a formcellboolean in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model formcellbooleanDB
type FormCellBooleanDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field formcellbooleanDB.Name
	Name_Data sql.NullString

	// Declation for basic field formcellbooleanDB.Value
	// provide the sql storage for the boolan
	Value_Data sql.NullBool
	// encoding of pointers
	FormCellBooleanPointersEnconding
}

// FormCellBooleanDBs arrays formcellbooleanDBs
// swagger:response formcellbooleanDBsResponse
type FormCellBooleanDBs []FormCellBooleanDB

// FormCellBooleanDBResponse provides response
// swagger:response formcellbooleanDBResponse
type FormCellBooleanDBResponse struct {
	FormCellBooleanDB
}

// FormCellBooleanWOP is a FormCellBoolean without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FormCellBooleanWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value bool `xlsx:"2"`
	// insertion for WOP pointer fields
}

var FormCellBoolean_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoFormCellBooleanStruct struct {
	// stores FormCellBooleanDB according to their gorm ID
	Map_FormCellBooleanDBID_FormCellBooleanDB map[uint]*FormCellBooleanDB

	// stores FormCellBooleanDB ID according to FormCellBoolean address
	Map_FormCellBooleanPtr_FormCellBooleanDBID map[*models.FormCellBoolean]uint

	// stores FormCellBoolean according to their gorm ID
	Map_FormCellBooleanDBID_FormCellBooleanPtr map[uint]*models.FormCellBoolean

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFormCellBoolean *BackRepoFormCellBooleanStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFormCellBoolean.stage
	return
}

func (backRepoFormCellBoolean *BackRepoFormCellBooleanStruct) GetDB() *gorm.DB {
	return backRepoFormCellBoolean.db
}

// GetFormCellBooleanDBFromFormCellBooleanPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFormCellBoolean *BackRepoFormCellBooleanStruct) GetFormCellBooleanDBFromFormCellBooleanPtr(formcellboolean *models.FormCellBoolean) (formcellbooleanDB *FormCellBooleanDB) {
	id := backRepoFormCellBoolean.Map_FormCellBooleanPtr_FormCellBooleanDBID[formcellboolean]
	formcellbooleanDB = backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanDB[id]
	return
}

// BackRepoFormCellBoolean.CommitPhaseOne commits all staged instances of FormCellBoolean to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormCellBoolean *BackRepoFormCellBooleanStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for formcellboolean := range stage.FormCellBooleans {
		backRepoFormCellBoolean.CommitPhaseOneInstance(formcellboolean)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, formcellboolean := range backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanPtr {
		if _, ok := stage.FormCellBooleans[formcellboolean]; !ok {
			backRepoFormCellBoolean.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFormCellBoolean.CommitDeleteInstance commits deletion of FormCellBoolean to the BackRepo
func (backRepoFormCellBoolean *BackRepoFormCellBooleanStruct) CommitDeleteInstance(id uint) (Error error) {

	formcellboolean := backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanPtr[id]

	// formcellboolean is not staged anymore, remove formcellbooleanDB
	formcellbooleanDB := backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanDB[id]
	query := backRepoFormCellBoolean.db.Unscoped().Delete(&formcellbooleanDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoFormCellBoolean.Map_FormCellBooleanPtr_FormCellBooleanDBID, formcellboolean)
	delete(backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanPtr, id)
	delete(backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanDB, id)

	return
}

// BackRepoFormCellBoolean.CommitPhaseOneInstance commits formcellboolean staged instances of FormCellBoolean to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormCellBoolean *BackRepoFormCellBooleanStruct) CommitPhaseOneInstance(formcellboolean *models.FormCellBoolean) (Error error) {

	// check if the formcellboolean is not commited yet
	if _, ok := backRepoFormCellBoolean.Map_FormCellBooleanPtr_FormCellBooleanDBID[formcellboolean]; ok {
		return
	}

	// initiate formcellboolean
	var formcellbooleanDB FormCellBooleanDB
	formcellbooleanDB.CopyBasicFieldsFromFormCellBoolean(formcellboolean)

	query := backRepoFormCellBoolean.db.Create(&formcellbooleanDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoFormCellBoolean.Map_FormCellBooleanPtr_FormCellBooleanDBID[formcellboolean] = formcellbooleanDB.ID
	backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanPtr[formcellbooleanDB.ID] = formcellboolean
	backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanDB[formcellbooleanDB.ID] = &formcellbooleanDB

	return
}

// BackRepoFormCellBoolean.CommitPhaseTwo commits all staged instances of FormCellBoolean to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCellBoolean *BackRepoFormCellBooleanStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, formcellboolean := range backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanPtr {
		backRepoFormCellBoolean.CommitPhaseTwoInstance(backRepo, idx, formcellboolean)
	}

	return
}

// BackRepoFormCellBoolean.CommitPhaseTwoInstance commits {{structname }} of models.FormCellBoolean to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCellBoolean *BackRepoFormCellBooleanStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, formcellboolean *models.FormCellBoolean) (Error error) {

	// fetch matching formcellbooleanDB
	if formcellbooleanDB, ok := backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanDB[idx]; ok {

		formcellbooleanDB.CopyBasicFieldsFromFormCellBoolean(formcellboolean)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoFormCellBoolean.db.Save(&formcellbooleanDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown FormCellBoolean intance %s", formcellboolean.Name))
		return err
	}

	return
}

// BackRepoFormCellBoolean.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFormCellBoolean *BackRepoFormCellBooleanStruct) CheckoutPhaseOne() (Error error) {

	formcellbooleanDBArray := make([]FormCellBooleanDB, 0)
	query := backRepoFormCellBoolean.db.Find(&formcellbooleanDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	formcellbooleanInstancesToBeRemovedFromTheStage := make(map[*models.FormCellBoolean]any)
	for key, value := range backRepoFormCellBoolean.stage.FormCellBooleans {
		formcellbooleanInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, formcellbooleanDB := range formcellbooleanDBArray {
		backRepoFormCellBoolean.CheckoutPhaseOneInstance(&formcellbooleanDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		formcellboolean, ok := backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanPtr[formcellbooleanDB.ID]
		if ok {
			delete(formcellbooleanInstancesToBeRemovedFromTheStage, formcellboolean)
		}
	}

	// remove from stage and back repo's 3 maps all formcellbooleans that are not in the checkout
	for formcellboolean := range formcellbooleanInstancesToBeRemovedFromTheStage {
		formcellboolean.Unstage(backRepoFormCellBoolean.GetStage())

		// remove instance from the back repo 3 maps
		formcellbooleanID := backRepoFormCellBoolean.Map_FormCellBooleanPtr_FormCellBooleanDBID[formcellboolean]
		delete(backRepoFormCellBoolean.Map_FormCellBooleanPtr_FormCellBooleanDBID, formcellboolean)
		delete(backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanDB, formcellbooleanID)
		delete(backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanPtr, formcellbooleanID)
	}

	return
}

// CheckoutPhaseOneInstance takes a formcellbooleanDB that has been found in the DB, updates the backRepo and stages the
// models version of the formcellbooleanDB
func (backRepoFormCellBoolean *BackRepoFormCellBooleanStruct) CheckoutPhaseOneInstance(formcellbooleanDB *FormCellBooleanDB) (Error error) {

	formcellboolean, ok := backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanPtr[formcellbooleanDB.ID]
	if !ok {
		formcellboolean = new(models.FormCellBoolean)

		backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanPtr[formcellbooleanDB.ID] = formcellboolean
		backRepoFormCellBoolean.Map_FormCellBooleanPtr_FormCellBooleanDBID[formcellboolean] = formcellbooleanDB.ID

		// append model store with the new element
		formcellboolean.Name = formcellbooleanDB.Name_Data.String
		formcellboolean.Stage(backRepoFormCellBoolean.GetStage())
	}
	formcellbooleanDB.CopyBasicFieldsToFormCellBoolean(formcellboolean)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	formcellboolean.Stage(backRepoFormCellBoolean.GetStage())

	// preserve pointer to formcellbooleanDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FormCellBooleanDBID_FormCellBooleanDB)[formcellbooleanDB hold variable pointers
	formcellbooleanDB_Data := *formcellbooleanDB
	preservedPtrToFormCellBoolean := &formcellbooleanDB_Data
	backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanDB[formcellbooleanDB.ID] = preservedPtrToFormCellBoolean

	return
}

// BackRepoFormCellBoolean.CheckoutPhaseTwo Checkouts all staged instances of FormCellBoolean to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCellBoolean *BackRepoFormCellBooleanStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, formcellbooleanDB := range backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanDB {
		backRepoFormCellBoolean.CheckoutPhaseTwoInstance(backRepo, formcellbooleanDB)
	}
	return
}

// BackRepoFormCellBoolean.CheckoutPhaseTwoInstance Checkouts staged instances of FormCellBoolean to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCellBoolean *BackRepoFormCellBooleanStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, formcellbooleanDB *FormCellBooleanDB) (Error error) {

	formcellboolean := backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanPtr[formcellbooleanDB.ID]
	_ = formcellboolean // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitFormCellBoolean allows commit of a single formcellboolean (if already staged)
func (backRepo *BackRepoStruct) CommitFormCellBoolean(formcellboolean *models.FormCellBoolean) {
	backRepo.BackRepoFormCellBoolean.CommitPhaseOneInstance(formcellboolean)
	if id, ok := backRepo.BackRepoFormCellBoolean.Map_FormCellBooleanPtr_FormCellBooleanDBID[formcellboolean]; ok {
		backRepo.BackRepoFormCellBoolean.CommitPhaseTwoInstance(backRepo, id, formcellboolean)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFormCellBoolean allows checkout of a single formcellboolean (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFormCellBoolean(formcellboolean *models.FormCellBoolean) {
	// check if the formcellboolean is staged
	if _, ok := backRepo.BackRepoFormCellBoolean.Map_FormCellBooleanPtr_FormCellBooleanDBID[formcellboolean]; ok {

		if id, ok := backRepo.BackRepoFormCellBoolean.Map_FormCellBooleanPtr_FormCellBooleanDBID[formcellboolean]; ok {
			var formcellbooleanDB FormCellBooleanDB
			formcellbooleanDB.ID = id

			if err := backRepo.BackRepoFormCellBoolean.db.First(&formcellbooleanDB, id).Error; err != nil {
				log.Panicln("CheckoutFormCellBoolean : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFormCellBoolean.CheckoutPhaseOneInstance(&formcellbooleanDB)
			backRepo.BackRepoFormCellBoolean.CheckoutPhaseTwoInstance(backRepo, &formcellbooleanDB)
		}
	}
}

// CopyBasicFieldsFromFormCellBoolean
func (formcellbooleanDB *FormCellBooleanDB) CopyBasicFieldsFromFormCellBoolean(formcellboolean *models.FormCellBoolean) {
	// insertion point for fields commit

	formcellbooleanDB.Name_Data.String = formcellboolean.Name
	formcellbooleanDB.Name_Data.Valid = true

	formcellbooleanDB.Value_Data.Bool = formcellboolean.Value
	formcellbooleanDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromFormCellBooleanWOP
func (formcellbooleanDB *FormCellBooleanDB) CopyBasicFieldsFromFormCellBooleanWOP(formcellboolean *FormCellBooleanWOP) {
	// insertion point for fields commit

	formcellbooleanDB.Name_Data.String = formcellboolean.Name
	formcellbooleanDB.Name_Data.Valid = true

	formcellbooleanDB.Value_Data.Bool = formcellboolean.Value
	formcellbooleanDB.Value_Data.Valid = true
}

// CopyBasicFieldsToFormCellBoolean
func (formcellbooleanDB *FormCellBooleanDB) CopyBasicFieldsToFormCellBoolean(formcellboolean *models.FormCellBoolean) {
	// insertion point for checkout of basic fields (back repo to stage)
	formcellboolean.Name = formcellbooleanDB.Name_Data.String
	formcellboolean.Value = formcellbooleanDB.Value_Data.Bool
}

// CopyBasicFieldsToFormCellBooleanWOP
func (formcellbooleanDB *FormCellBooleanDB) CopyBasicFieldsToFormCellBooleanWOP(formcellboolean *FormCellBooleanWOP) {
	formcellboolean.ID = int(formcellbooleanDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	formcellboolean.Name = formcellbooleanDB.Name_Data.String
	formcellboolean.Value = formcellbooleanDB.Value_Data.Bool
}

// Backup generates a json file from a slice of all FormCellBooleanDB instances in the backrepo
func (backRepoFormCellBoolean *BackRepoFormCellBooleanStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FormCellBooleanDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormCellBooleanDB, 0)
	for _, formcellbooleanDB := range backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanDB {
		forBackup = append(forBackup, formcellbooleanDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json FormCellBoolean ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json FormCellBoolean file", err.Error())
	}
}

// Backup generates a json file from a slice of all FormCellBooleanDB instances in the backrepo
func (backRepoFormCellBoolean *BackRepoFormCellBooleanStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormCellBooleanDB, 0)
	for _, formcellbooleanDB := range backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanDB {
		forBackup = append(forBackup, formcellbooleanDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("FormCellBoolean")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&FormCellBoolean_Fields, -1)
	for _, formcellbooleanDB := range forBackup {

		var formcellbooleanWOP FormCellBooleanWOP
		formcellbooleanDB.CopyBasicFieldsToFormCellBooleanWOP(&formcellbooleanWOP)

		row := sh.AddRow()
		row.WriteStruct(&formcellbooleanWOP, -1)
	}
}

// RestoreXL from the "FormCellBoolean" sheet all FormCellBooleanDB instances
func (backRepoFormCellBoolean *BackRepoFormCellBooleanStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFormCellBooleanid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["FormCellBoolean"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFormCellBoolean.rowVisitorFormCellBoolean)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoFormCellBoolean *BackRepoFormCellBooleanStruct) rowVisitorFormCellBoolean(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var formcellbooleanWOP FormCellBooleanWOP
		row.ReadStruct(&formcellbooleanWOP)

		// add the unmarshalled struct to the stage
		formcellbooleanDB := new(FormCellBooleanDB)
		formcellbooleanDB.CopyBasicFieldsFromFormCellBooleanWOP(&formcellbooleanWOP)

		formcellbooleanDB_ID_atBackupTime := formcellbooleanDB.ID
		formcellbooleanDB.ID = 0
		query := backRepoFormCellBoolean.db.Create(formcellbooleanDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanDB[formcellbooleanDB.ID] = formcellbooleanDB
		BackRepoFormCellBooleanid_atBckpTime_newID[formcellbooleanDB_ID_atBackupTime] = formcellbooleanDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FormCellBooleanDB.json" in dirPath that stores an array
// of FormCellBooleanDB and stores it in the database
// the map BackRepoFormCellBooleanid_atBckpTime_newID is updated accordingly
func (backRepoFormCellBoolean *BackRepoFormCellBooleanStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFormCellBooleanid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FormCellBooleanDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json FormCellBoolean file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FormCellBooleanDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FormCellBooleanDBID_FormCellBooleanDB
	for _, formcellbooleanDB := range forRestore {

		formcellbooleanDB_ID_atBackupTime := formcellbooleanDB.ID
		formcellbooleanDB.ID = 0
		query := backRepoFormCellBoolean.db.Create(formcellbooleanDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanDB[formcellbooleanDB.ID] = formcellbooleanDB
		BackRepoFormCellBooleanid_atBckpTime_newID[formcellbooleanDB_ID_atBackupTime] = formcellbooleanDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json FormCellBoolean file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<FormCellBoolean>id_atBckpTime_newID
// to compute new index
func (backRepoFormCellBoolean *BackRepoFormCellBooleanStruct) RestorePhaseTwo() {

	for _, formcellbooleanDB := range backRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanDB {

		// next line of code is to avert unused variable compilation error
		_ = formcellbooleanDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoFormCellBoolean.db.Model(formcellbooleanDB).Updates(*formcellbooleanDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFormCellBooleanid_atBckpTime_newID map[uint]uint
