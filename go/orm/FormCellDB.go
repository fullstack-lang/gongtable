// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongtable/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_FormCell_sql sql.NullBool
var dummy_FormCell_time time.Duration
var dummy_FormCell_sort sort.Float64Slice

// FormCellAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model formcellAPI
type FormCellAPI struct {
	gorm.Model

	models.FormCell

	// encoding of pointers
	FormCellPointersEnconding
}

// FormCellPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FormCellPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field FormCellString is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FormCellStringID sql.NullInt64

	// field FormCellFloat64 is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FormCellFloat64ID sql.NullInt64

	// field FormCellInt is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FormCellIntID sql.NullInt64

	// field FormCellBool is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	FormCellBoolID sql.NullInt64

	// Implementation of a reverse ID for field Form{}.FormCells []*FormCell
	Form_FormCellsDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Form_FormCellsDBID_Index sql.NullInt64
}

// FormCellDB describes a formcell in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model formcellDB
type FormCellDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field formcellDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	FormCellPointersEnconding
}

// FormCellDBs arrays formcellDBs
// swagger:response formcellDBsResponse
type FormCellDBs []FormCellDB

// FormCellDBResponse provides response
// swagger:response formcellDBResponse
type FormCellDBResponse struct {
	FormCellDB
}

// FormCellWOP is a FormCell without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FormCellWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var FormCell_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoFormCellStruct struct {
	// stores FormCellDB according to their gorm ID
	Map_FormCellDBID_FormCellDB map[uint]*FormCellDB

	// stores FormCellDB ID according to FormCell address
	Map_FormCellPtr_FormCellDBID map[*models.FormCell]uint

	// stores FormCell according to their gorm ID
	Map_FormCellDBID_FormCellPtr map[uint]*models.FormCell

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFormCell *BackRepoFormCellStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFormCell.stage
	return
}

func (backRepoFormCell *BackRepoFormCellStruct) GetDB() *gorm.DB {
	return backRepoFormCell.db
}

// GetFormCellDBFromFormCellPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFormCell *BackRepoFormCellStruct) GetFormCellDBFromFormCellPtr(formcell *models.FormCell) (formcellDB *FormCellDB) {
	id := backRepoFormCell.Map_FormCellPtr_FormCellDBID[formcell]
	formcellDB = backRepoFormCell.Map_FormCellDBID_FormCellDB[id]
	return
}

// BackRepoFormCell.CommitPhaseOne commits all staged instances of FormCell to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormCell *BackRepoFormCellStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for formcell := range stage.FormCells {
		backRepoFormCell.CommitPhaseOneInstance(formcell)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, formcell := range backRepoFormCell.Map_FormCellDBID_FormCellPtr {
		if _, ok := stage.FormCells[formcell]; !ok {
			backRepoFormCell.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFormCell.CommitDeleteInstance commits deletion of FormCell to the BackRepo
func (backRepoFormCell *BackRepoFormCellStruct) CommitDeleteInstance(id uint) (Error error) {

	formcell := backRepoFormCell.Map_FormCellDBID_FormCellPtr[id]

	// formcell is not staged anymore, remove formcellDB
	formcellDB := backRepoFormCell.Map_FormCellDBID_FormCellDB[id]
	query := backRepoFormCell.db.Unscoped().Delete(&formcellDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoFormCell.Map_FormCellPtr_FormCellDBID, formcell)
	delete(backRepoFormCell.Map_FormCellDBID_FormCellPtr, id)
	delete(backRepoFormCell.Map_FormCellDBID_FormCellDB, id)

	return
}

// BackRepoFormCell.CommitPhaseOneInstance commits formcell staged instances of FormCell to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormCell *BackRepoFormCellStruct) CommitPhaseOneInstance(formcell *models.FormCell) (Error error) {

	// check if the formcell is not commited yet
	if _, ok := backRepoFormCell.Map_FormCellPtr_FormCellDBID[formcell]; ok {
		return
	}

	// initiate formcell
	var formcellDB FormCellDB
	formcellDB.CopyBasicFieldsFromFormCell(formcell)

	query := backRepoFormCell.db.Create(&formcellDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoFormCell.Map_FormCellPtr_FormCellDBID[formcell] = formcellDB.ID
	backRepoFormCell.Map_FormCellDBID_FormCellPtr[formcellDB.ID] = formcell
	backRepoFormCell.Map_FormCellDBID_FormCellDB[formcellDB.ID] = &formcellDB

	return
}

// BackRepoFormCell.CommitPhaseTwo commits all staged instances of FormCell to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCell *BackRepoFormCellStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, formcell := range backRepoFormCell.Map_FormCellDBID_FormCellPtr {
		backRepoFormCell.CommitPhaseTwoInstance(backRepo, idx, formcell)
	}

	return
}

// BackRepoFormCell.CommitPhaseTwoInstance commits {{structname }} of models.FormCell to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCell *BackRepoFormCellStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, formcell *models.FormCell) (Error error) {

	// fetch matching formcellDB
	if formcellDB, ok := backRepoFormCell.Map_FormCellDBID_FormCellDB[idx]; ok {

		formcellDB.CopyBasicFieldsFromFormCell(formcell)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value formcell.FormCellString translates to updating the formcell.FormCellStringID
		formcellDB.FormCellStringID.Valid = true // allow for a 0 value (nil association)
		if formcell.FormCellString != nil {
			if FormCellStringId, ok := backRepo.BackRepoFormCellString.Map_FormCellStringPtr_FormCellStringDBID[formcell.FormCellString]; ok {
				formcellDB.FormCellStringID.Int64 = int64(FormCellStringId)
				formcellDB.FormCellStringID.Valid = true
			}
		}

		// commit pointer value formcell.FormCellFloat64 translates to updating the formcell.FormCellFloat64ID
		formcellDB.FormCellFloat64ID.Valid = true // allow for a 0 value (nil association)
		if formcell.FormCellFloat64 != nil {
			if FormCellFloat64Id, ok := backRepo.BackRepoFormCellFloat64.Map_FormCellFloat64Ptr_FormCellFloat64DBID[formcell.FormCellFloat64]; ok {
				formcellDB.FormCellFloat64ID.Int64 = int64(FormCellFloat64Id)
				formcellDB.FormCellFloat64ID.Valid = true
			}
		}

		// commit pointer value formcell.FormCellInt translates to updating the formcell.FormCellIntID
		formcellDB.FormCellIntID.Valid = true // allow for a 0 value (nil association)
		if formcell.FormCellInt != nil {
			if FormCellIntId, ok := backRepo.BackRepoFormCellInt.Map_FormCellIntPtr_FormCellIntDBID[formcell.FormCellInt]; ok {
				formcellDB.FormCellIntID.Int64 = int64(FormCellIntId)
				formcellDB.FormCellIntID.Valid = true
			}
		}

		// commit pointer value formcell.FormCellBool translates to updating the formcell.FormCellBoolID
		formcellDB.FormCellBoolID.Valid = true // allow for a 0 value (nil association)
		if formcell.FormCellBool != nil {
			if FormCellBoolId, ok := backRepo.BackRepoFormCellBoolean.Map_FormCellBooleanPtr_FormCellBooleanDBID[formcell.FormCellBool]; ok {
				formcellDB.FormCellBoolID.Int64 = int64(FormCellBoolId)
				formcellDB.FormCellBoolID.Valid = true
			}
		}

		query := backRepoFormCell.db.Save(&formcellDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown FormCell intance %s", formcell.Name))
		return err
	}

	return
}

// BackRepoFormCell.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFormCell *BackRepoFormCellStruct) CheckoutPhaseOne() (Error error) {

	formcellDBArray := make([]FormCellDB, 0)
	query := backRepoFormCell.db.Find(&formcellDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	formcellInstancesToBeRemovedFromTheStage := make(map[*models.FormCell]any)
	for key, value := range backRepoFormCell.stage.FormCells {
		formcellInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, formcellDB := range formcellDBArray {
		backRepoFormCell.CheckoutPhaseOneInstance(&formcellDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		formcell, ok := backRepoFormCell.Map_FormCellDBID_FormCellPtr[formcellDB.ID]
		if ok {
			delete(formcellInstancesToBeRemovedFromTheStage, formcell)
		}
	}

	// remove from stage and back repo's 3 maps all formcells that are not in the checkout
	for formcell := range formcellInstancesToBeRemovedFromTheStage {
		formcell.Unstage(backRepoFormCell.GetStage())

		// remove instance from the back repo 3 maps
		formcellID := backRepoFormCell.Map_FormCellPtr_FormCellDBID[formcell]
		delete(backRepoFormCell.Map_FormCellPtr_FormCellDBID, formcell)
		delete(backRepoFormCell.Map_FormCellDBID_FormCellDB, formcellID)
		delete(backRepoFormCell.Map_FormCellDBID_FormCellPtr, formcellID)
	}

	return
}

// CheckoutPhaseOneInstance takes a formcellDB that has been found in the DB, updates the backRepo and stages the
// models version of the formcellDB
func (backRepoFormCell *BackRepoFormCellStruct) CheckoutPhaseOneInstance(formcellDB *FormCellDB) (Error error) {

	formcell, ok := backRepoFormCell.Map_FormCellDBID_FormCellPtr[formcellDB.ID]
	if !ok {
		formcell = new(models.FormCell)

		backRepoFormCell.Map_FormCellDBID_FormCellPtr[formcellDB.ID] = formcell
		backRepoFormCell.Map_FormCellPtr_FormCellDBID[formcell] = formcellDB.ID

		// append model store with the new element
		formcell.Name = formcellDB.Name_Data.String
		formcell.Stage(backRepoFormCell.GetStage())
	}
	formcellDB.CopyBasicFieldsToFormCell(formcell)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	formcell.Stage(backRepoFormCell.GetStage())

	// preserve pointer to formcellDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FormCellDBID_FormCellDB)[formcellDB hold variable pointers
	formcellDB_Data := *formcellDB
	preservedPtrToFormCell := &formcellDB_Data
	backRepoFormCell.Map_FormCellDBID_FormCellDB[formcellDB.ID] = preservedPtrToFormCell

	return
}

// BackRepoFormCell.CheckoutPhaseTwo Checkouts all staged instances of FormCell to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCell *BackRepoFormCellStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, formcellDB := range backRepoFormCell.Map_FormCellDBID_FormCellDB {
		backRepoFormCell.CheckoutPhaseTwoInstance(backRepo, formcellDB)
	}
	return
}

// BackRepoFormCell.CheckoutPhaseTwoInstance Checkouts staged instances of FormCell to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCell *BackRepoFormCellStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, formcellDB *FormCellDB) (Error error) {

	formcell := backRepoFormCell.Map_FormCellDBID_FormCellPtr[formcellDB.ID]
	_ = formcell // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// FormCellString field
	formcell.FormCellString = nil
	if formcellDB.FormCellStringID.Int64 != 0 {
		formcell.FormCellString = backRepo.BackRepoFormCellString.Map_FormCellStringDBID_FormCellStringPtr[uint(formcellDB.FormCellStringID.Int64)]
	}
	// FormCellFloat64 field
	formcell.FormCellFloat64 = nil
	if formcellDB.FormCellFloat64ID.Int64 != 0 {
		formcell.FormCellFloat64 = backRepo.BackRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64Ptr[uint(formcellDB.FormCellFloat64ID.Int64)]
	}
	// FormCellInt field
	formcell.FormCellInt = nil
	if formcellDB.FormCellIntID.Int64 != 0 {
		formcell.FormCellInt = backRepo.BackRepoFormCellInt.Map_FormCellIntDBID_FormCellIntPtr[uint(formcellDB.FormCellIntID.Int64)]
	}
	// FormCellBool field
	formcell.FormCellBool = nil
	if formcellDB.FormCellBoolID.Int64 != 0 {
		formcell.FormCellBool = backRepo.BackRepoFormCellBoolean.Map_FormCellBooleanDBID_FormCellBooleanPtr[uint(formcellDB.FormCellBoolID.Int64)]
	}
	return
}

// CommitFormCell allows commit of a single formcell (if already staged)
func (backRepo *BackRepoStruct) CommitFormCell(formcell *models.FormCell) {
	backRepo.BackRepoFormCell.CommitPhaseOneInstance(formcell)
	if id, ok := backRepo.BackRepoFormCell.Map_FormCellPtr_FormCellDBID[formcell]; ok {
		backRepo.BackRepoFormCell.CommitPhaseTwoInstance(backRepo, id, formcell)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFormCell allows checkout of a single formcell (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFormCell(formcell *models.FormCell) {
	// check if the formcell is staged
	if _, ok := backRepo.BackRepoFormCell.Map_FormCellPtr_FormCellDBID[formcell]; ok {

		if id, ok := backRepo.BackRepoFormCell.Map_FormCellPtr_FormCellDBID[formcell]; ok {
			var formcellDB FormCellDB
			formcellDB.ID = id

			if err := backRepo.BackRepoFormCell.db.First(&formcellDB, id).Error; err != nil {
				log.Panicln("CheckoutFormCell : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFormCell.CheckoutPhaseOneInstance(&formcellDB)
			backRepo.BackRepoFormCell.CheckoutPhaseTwoInstance(backRepo, &formcellDB)
		}
	}
}

// CopyBasicFieldsFromFormCell
func (formcellDB *FormCellDB) CopyBasicFieldsFromFormCell(formcell *models.FormCell) {
	// insertion point for fields commit

	formcellDB.Name_Data.String = formcell.Name
	formcellDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromFormCellWOP
func (formcellDB *FormCellDB) CopyBasicFieldsFromFormCellWOP(formcell *FormCellWOP) {
	// insertion point for fields commit

	formcellDB.Name_Data.String = formcell.Name
	formcellDB.Name_Data.Valid = true
}

// CopyBasicFieldsToFormCell
func (formcellDB *FormCellDB) CopyBasicFieldsToFormCell(formcell *models.FormCell) {
	// insertion point for checkout of basic fields (back repo to stage)
	formcell.Name = formcellDB.Name_Data.String
}

// CopyBasicFieldsToFormCellWOP
func (formcellDB *FormCellDB) CopyBasicFieldsToFormCellWOP(formcell *FormCellWOP) {
	formcell.ID = int(formcellDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	formcell.Name = formcellDB.Name_Data.String
}

// Backup generates a json file from a slice of all FormCellDB instances in the backrepo
func (backRepoFormCell *BackRepoFormCellStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FormCellDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormCellDB, 0)
	for _, formcellDB := range backRepoFormCell.Map_FormCellDBID_FormCellDB {
		forBackup = append(forBackup, formcellDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json FormCell ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json FormCell file", err.Error())
	}
}

// Backup generates a json file from a slice of all FormCellDB instances in the backrepo
func (backRepoFormCell *BackRepoFormCellStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormCellDB, 0)
	for _, formcellDB := range backRepoFormCell.Map_FormCellDBID_FormCellDB {
		forBackup = append(forBackup, formcellDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("FormCell")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&FormCell_Fields, -1)
	for _, formcellDB := range forBackup {

		var formcellWOP FormCellWOP
		formcellDB.CopyBasicFieldsToFormCellWOP(&formcellWOP)

		row := sh.AddRow()
		row.WriteStruct(&formcellWOP, -1)
	}
}

// RestoreXL from the "FormCell" sheet all FormCellDB instances
func (backRepoFormCell *BackRepoFormCellStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFormCellid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["FormCell"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFormCell.rowVisitorFormCell)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoFormCell *BackRepoFormCellStruct) rowVisitorFormCell(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var formcellWOP FormCellWOP
		row.ReadStruct(&formcellWOP)

		// add the unmarshalled struct to the stage
		formcellDB := new(FormCellDB)
		formcellDB.CopyBasicFieldsFromFormCellWOP(&formcellWOP)

		formcellDB_ID_atBackupTime := formcellDB.ID
		formcellDB.ID = 0
		query := backRepoFormCell.db.Create(formcellDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoFormCell.Map_FormCellDBID_FormCellDB[formcellDB.ID] = formcellDB
		BackRepoFormCellid_atBckpTime_newID[formcellDB_ID_atBackupTime] = formcellDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FormCellDB.json" in dirPath that stores an array
// of FormCellDB and stores it in the database
// the map BackRepoFormCellid_atBckpTime_newID is updated accordingly
func (backRepoFormCell *BackRepoFormCellStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFormCellid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FormCellDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json FormCell file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FormCellDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FormCellDBID_FormCellDB
	for _, formcellDB := range forRestore {

		formcellDB_ID_atBackupTime := formcellDB.ID
		formcellDB.ID = 0
		query := backRepoFormCell.db.Create(formcellDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoFormCell.Map_FormCellDBID_FormCellDB[formcellDB.ID] = formcellDB
		BackRepoFormCellid_atBckpTime_newID[formcellDB_ID_atBackupTime] = formcellDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json FormCell file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<FormCell>id_atBckpTime_newID
// to compute new index
func (backRepoFormCell *BackRepoFormCellStruct) RestorePhaseTwo() {

	for _, formcellDB := range backRepoFormCell.Map_FormCellDBID_FormCellDB {

		// next line of code is to avert unused variable compilation error
		_ = formcellDB

		// insertion point for reindexing pointers encoding
		// reindexing FormCellString field
		if formcellDB.FormCellStringID.Int64 != 0 {
			formcellDB.FormCellStringID.Int64 = int64(BackRepoFormCellStringid_atBckpTime_newID[uint(formcellDB.FormCellStringID.Int64)])
			formcellDB.FormCellStringID.Valid = true
		}

		// reindexing FormCellFloat64 field
		if formcellDB.FormCellFloat64ID.Int64 != 0 {
			formcellDB.FormCellFloat64ID.Int64 = int64(BackRepoFormCellFloat64id_atBckpTime_newID[uint(formcellDB.FormCellFloat64ID.Int64)])
			formcellDB.FormCellFloat64ID.Valid = true
		}

		// reindexing FormCellInt field
		if formcellDB.FormCellIntID.Int64 != 0 {
			formcellDB.FormCellIntID.Int64 = int64(BackRepoFormCellIntid_atBckpTime_newID[uint(formcellDB.FormCellIntID.Int64)])
			formcellDB.FormCellIntID.Valid = true
		}

		// reindexing FormCellBool field
		if formcellDB.FormCellBoolID.Int64 != 0 {
			formcellDB.FormCellBoolID.Int64 = int64(BackRepoFormCellBooleanid_atBckpTime_newID[uint(formcellDB.FormCellBoolID.Int64)])
			formcellDB.FormCellBoolID.Valid = true
		}

		// This reindex formcell.FormCells
		if formcellDB.Form_FormCellsDBID.Int64 != 0 {
			formcellDB.Form_FormCellsDBID.Int64 =
				int64(BackRepoFormid_atBckpTime_newID[uint(formcellDB.Form_FormCellsDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoFormCell.db.Model(formcellDB).Updates(*formcellDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFormCellid_atBckpTime_newID map[uint]uint
