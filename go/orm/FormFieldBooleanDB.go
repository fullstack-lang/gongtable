// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongtable/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_FormFieldBoolean_sql sql.NullBool
var dummy_FormFieldBoolean_time time.Duration
var dummy_FormFieldBoolean_sort sort.Float64Slice

// FormFieldBooleanAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model formfieldbooleanAPI
type FormFieldBooleanAPI struct {
	gorm.Model

	models.FormFieldBoolean

	// encoding of pointers
	FormFieldBooleanPointersEnconding
}

// FormFieldBooleanPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FormFieldBooleanPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// FormFieldBooleanDB describes a formfieldboolean in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model formfieldbooleanDB
type FormFieldBooleanDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field formfieldbooleanDB.Name
	Name_Data sql.NullString

	// Declation for basic field formfieldbooleanDB.Value
	// provide the sql storage for the boolan
	Value_Data sql.NullBool
	// encoding of pointers
	FormFieldBooleanPointersEnconding
}

// FormFieldBooleanDBs arrays formfieldbooleanDBs
// swagger:response formfieldbooleanDBsResponse
type FormFieldBooleanDBs []FormFieldBooleanDB

// FormFieldBooleanDBResponse provides response
// swagger:response formfieldbooleanDBResponse
type FormFieldBooleanDBResponse struct {
	FormFieldBooleanDB
}

// FormFieldBooleanWOP is a FormFieldBoolean without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FormFieldBooleanWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value bool `xlsx:"2"`
	// insertion for WOP pointer fields
}

var FormFieldBoolean_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoFormFieldBooleanStruct struct {
	// stores FormFieldBooleanDB according to their gorm ID
	Map_FormFieldBooleanDBID_FormFieldBooleanDB map[uint]*FormFieldBooleanDB

	// stores FormFieldBooleanDB ID according to FormFieldBoolean address
	Map_FormFieldBooleanPtr_FormFieldBooleanDBID map[*models.FormFieldBoolean]uint

	// stores FormFieldBoolean according to their gorm ID
	Map_FormFieldBooleanDBID_FormFieldBooleanPtr map[uint]*models.FormFieldBoolean

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFormFieldBoolean *BackRepoFormFieldBooleanStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFormFieldBoolean.stage
	return
}

func (backRepoFormFieldBoolean *BackRepoFormFieldBooleanStruct) GetDB() *gorm.DB {
	return backRepoFormFieldBoolean.db
}

// GetFormFieldBooleanDBFromFormFieldBooleanPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFormFieldBoolean *BackRepoFormFieldBooleanStruct) GetFormFieldBooleanDBFromFormFieldBooleanPtr(formfieldboolean *models.FormFieldBoolean) (formfieldbooleanDB *FormFieldBooleanDB) {
	id := backRepoFormFieldBoolean.Map_FormFieldBooleanPtr_FormFieldBooleanDBID[formfieldboolean]
	formfieldbooleanDB = backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanDB[id]
	return
}

// BackRepoFormFieldBoolean.CommitPhaseOne commits all staged instances of FormFieldBoolean to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormFieldBoolean *BackRepoFormFieldBooleanStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for formfieldboolean := range stage.FormFieldBooleans {
		backRepoFormFieldBoolean.CommitPhaseOneInstance(formfieldboolean)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, formfieldboolean := range backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanPtr {
		if _, ok := stage.FormFieldBooleans[formfieldboolean]; !ok {
			backRepoFormFieldBoolean.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFormFieldBoolean.CommitDeleteInstance commits deletion of FormFieldBoolean to the BackRepo
func (backRepoFormFieldBoolean *BackRepoFormFieldBooleanStruct) CommitDeleteInstance(id uint) (Error error) {

	formfieldboolean := backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanPtr[id]

	// formfieldboolean is not staged anymore, remove formfieldbooleanDB
	formfieldbooleanDB := backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanDB[id]
	query := backRepoFormFieldBoolean.db.Unscoped().Delete(&formfieldbooleanDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoFormFieldBoolean.Map_FormFieldBooleanPtr_FormFieldBooleanDBID, formfieldboolean)
	delete(backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanPtr, id)
	delete(backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanDB, id)

	return
}

// BackRepoFormFieldBoolean.CommitPhaseOneInstance commits formfieldboolean staged instances of FormFieldBoolean to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormFieldBoolean *BackRepoFormFieldBooleanStruct) CommitPhaseOneInstance(formfieldboolean *models.FormFieldBoolean) (Error error) {

	// check if the formfieldboolean is not commited yet
	if _, ok := backRepoFormFieldBoolean.Map_FormFieldBooleanPtr_FormFieldBooleanDBID[formfieldboolean]; ok {
		return
	}

	// initiate formfieldboolean
	var formfieldbooleanDB FormFieldBooleanDB
	formfieldbooleanDB.CopyBasicFieldsFromFormFieldBoolean(formfieldboolean)

	query := backRepoFormFieldBoolean.db.Create(&formfieldbooleanDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoFormFieldBoolean.Map_FormFieldBooleanPtr_FormFieldBooleanDBID[formfieldboolean] = formfieldbooleanDB.ID
	backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanPtr[formfieldbooleanDB.ID] = formfieldboolean
	backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanDB[formfieldbooleanDB.ID] = &formfieldbooleanDB

	return
}

// BackRepoFormFieldBoolean.CommitPhaseTwo commits all staged instances of FormFieldBoolean to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormFieldBoolean *BackRepoFormFieldBooleanStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, formfieldboolean := range backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanPtr {
		backRepoFormFieldBoolean.CommitPhaseTwoInstance(backRepo, idx, formfieldboolean)
	}

	return
}

// BackRepoFormFieldBoolean.CommitPhaseTwoInstance commits {{structname }} of models.FormFieldBoolean to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormFieldBoolean *BackRepoFormFieldBooleanStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, formfieldboolean *models.FormFieldBoolean) (Error error) {

	// fetch matching formfieldbooleanDB
	if formfieldbooleanDB, ok := backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanDB[idx]; ok {

		formfieldbooleanDB.CopyBasicFieldsFromFormFieldBoolean(formfieldboolean)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoFormFieldBoolean.db.Save(&formfieldbooleanDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown FormFieldBoolean intance %s", formfieldboolean.Name))
		return err
	}

	return
}

// BackRepoFormFieldBoolean.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFormFieldBoolean *BackRepoFormFieldBooleanStruct) CheckoutPhaseOne() (Error error) {

	formfieldbooleanDBArray := make([]FormFieldBooleanDB, 0)
	query := backRepoFormFieldBoolean.db.Find(&formfieldbooleanDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	formfieldbooleanInstancesToBeRemovedFromTheStage := make(map[*models.FormFieldBoolean]any)
	for key, value := range backRepoFormFieldBoolean.stage.FormFieldBooleans {
		formfieldbooleanInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, formfieldbooleanDB := range formfieldbooleanDBArray {
		backRepoFormFieldBoolean.CheckoutPhaseOneInstance(&formfieldbooleanDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		formfieldboolean, ok := backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanPtr[formfieldbooleanDB.ID]
		if ok {
			delete(formfieldbooleanInstancesToBeRemovedFromTheStage, formfieldboolean)
		}
	}

	// remove from stage and back repo's 3 maps all formfieldbooleans that are not in the checkout
	for formfieldboolean := range formfieldbooleanInstancesToBeRemovedFromTheStage {
		formfieldboolean.Unstage(backRepoFormFieldBoolean.GetStage())

		// remove instance from the back repo 3 maps
		formfieldbooleanID := backRepoFormFieldBoolean.Map_FormFieldBooleanPtr_FormFieldBooleanDBID[formfieldboolean]
		delete(backRepoFormFieldBoolean.Map_FormFieldBooleanPtr_FormFieldBooleanDBID, formfieldboolean)
		delete(backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanDB, formfieldbooleanID)
		delete(backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanPtr, formfieldbooleanID)
	}

	return
}

// CheckoutPhaseOneInstance takes a formfieldbooleanDB that has been found in the DB, updates the backRepo and stages the
// models version of the formfieldbooleanDB
func (backRepoFormFieldBoolean *BackRepoFormFieldBooleanStruct) CheckoutPhaseOneInstance(formfieldbooleanDB *FormFieldBooleanDB) (Error error) {

	formfieldboolean, ok := backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanPtr[formfieldbooleanDB.ID]
	if !ok {
		formfieldboolean = new(models.FormFieldBoolean)

		backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanPtr[formfieldbooleanDB.ID] = formfieldboolean
		backRepoFormFieldBoolean.Map_FormFieldBooleanPtr_FormFieldBooleanDBID[formfieldboolean] = formfieldbooleanDB.ID

		// append model store with the new element
		formfieldboolean.Name = formfieldbooleanDB.Name_Data.String
		formfieldboolean.Stage(backRepoFormFieldBoolean.GetStage())
	}
	formfieldbooleanDB.CopyBasicFieldsToFormFieldBoolean(formfieldboolean)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	formfieldboolean.Stage(backRepoFormFieldBoolean.GetStage())

	// preserve pointer to formfieldbooleanDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FormFieldBooleanDBID_FormFieldBooleanDB)[formfieldbooleanDB hold variable pointers
	formfieldbooleanDB_Data := *formfieldbooleanDB
	preservedPtrToFormFieldBoolean := &formfieldbooleanDB_Data
	backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanDB[formfieldbooleanDB.ID] = preservedPtrToFormFieldBoolean

	return
}

// BackRepoFormFieldBoolean.CheckoutPhaseTwo Checkouts all staged instances of FormFieldBoolean to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormFieldBoolean *BackRepoFormFieldBooleanStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, formfieldbooleanDB := range backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanDB {
		backRepoFormFieldBoolean.CheckoutPhaseTwoInstance(backRepo, formfieldbooleanDB)
	}
	return
}

// BackRepoFormFieldBoolean.CheckoutPhaseTwoInstance Checkouts staged instances of FormFieldBoolean to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormFieldBoolean *BackRepoFormFieldBooleanStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, formfieldbooleanDB *FormFieldBooleanDB) (Error error) {

	formfieldboolean := backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanPtr[formfieldbooleanDB.ID]
	_ = formfieldboolean // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitFormFieldBoolean allows commit of a single formfieldboolean (if already staged)
func (backRepo *BackRepoStruct) CommitFormFieldBoolean(formfieldboolean *models.FormFieldBoolean) {
	backRepo.BackRepoFormFieldBoolean.CommitPhaseOneInstance(formfieldboolean)
	if id, ok := backRepo.BackRepoFormFieldBoolean.Map_FormFieldBooleanPtr_FormFieldBooleanDBID[formfieldboolean]; ok {
		backRepo.BackRepoFormFieldBoolean.CommitPhaseTwoInstance(backRepo, id, formfieldboolean)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFormFieldBoolean allows checkout of a single formfieldboolean (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFormFieldBoolean(formfieldboolean *models.FormFieldBoolean) {
	// check if the formfieldboolean is staged
	if _, ok := backRepo.BackRepoFormFieldBoolean.Map_FormFieldBooleanPtr_FormFieldBooleanDBID[formfieldboolean]; ok {

		if id, ok := backRepo.BackRepoFormFieldBoolean.Map_FormFieldBooleanPtr_FormFieldBooleanDBID[formfieldboolean]; ok {
			var formfieldbooleanDB FormFieldBooleanDB
			formfieldbooleanDB.ID = id

			if err := backRepo.BackRepoFormFieldBoolean.db.First(&formfieldbooleanDB, id).Error; err != nil {
				log.Panicln("CheckoutFormFieldBoolean : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFormFieldBoolean.CheckoutPhaseOneInstance(&formfieldbooleanDB)
			backRepo.BackRepoFormFieldBoolean.CheckoutPhaseTwoInstance(backRepo, &formfieldbooleanDB)
		}
	}
}

// CopyBasicFieldsFromFormFieldBoolean
func (formfieldbooleanDB *FormFieldBooleanDB) CopyBasicFieldsFromFormFieldBoolean(formfieldboolean *models.FormFieldBoolean) {
	// insertion point for fields commit

	formfieldbooleanDB.Name_Data.String = formfieldboolean.Name
	formfieldbooleanDB.Name_Data.Valid = true

	formfieldbooleanDB.Value_Data.Bool = formfieldboolean.Value
	formfieldbooleanDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromFormFieldBooleanWOP
func (formfieldbooleanDB *FormFieldBooleanDB) CopyBasicFieldsFromFormFieldBooleanWOP(formfieldboolean *FormFieldBooleanWOP) {
	// insertion point for fields commit

	formfieldbooleanDB.Name_Data.String = formfieldboolean.Name
	formfieldbooleanDB.Name_Data.Valid = true

	formfieldbooleanDB.Value_Data.Bool = formfieldboolean.Value
	formfieldbooleanDB.Value_Data.Valid = true
}

// CopyBasicFieldsToFormFieldBoolean
func (formfieldbooleanDB *FormFieldBooleanDB) CopyBasicFieldsToFormFieldBoolean(formfieldboolean *models.FormFieldBoolean) {
	// insertion point for checkout of basic fields (back repo to stage)
	formfieldboolean.Name = formfieldbooleanDB.Name_Data.String
	formfieldboolean.Value = formfieldbooleanDB.Value_Data.Bool
}

// CopyBasicFieldsToFormFieldBooleanWOP
func (formfieldbooleanDB *FormFieldBooleanDB) CopyBasicFieldsToFormFieldBooleanWOP(formfieldboolean *FormFieldBooleanWOP) {
	formfieldboolean.ID = int(formfieldbooleanDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	formfieldboolean.Name = formfieldbooleanDB.Name_Data.String
	formfieldboolean.Value = formfieldbooleanDB.Value_Data.Bool
}

// Backup generates a json file from a slice of all FormFieldBooleanDB instances in the backrepo
func (backRepoFormFieldBoolean *BackRepoFormFieldBooleanStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FormFieldBooleanDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormFieldBooleanDB, 0)
	for _, formfieldbooleanDB := range backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanDB {
		forBackup = append(forBackup, formfieldbooleanDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json FormFieldBoolean ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json FormFieldBoolean file", err.Error())
	}
}

// Backup generates a json file from a slice of all FormFieldBooleanDB instances in the backrepo
func (backRepoFormFieldBoolean *BackRepoFormFieldBooleanStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormFieldBooleanDB, 0)
	for _, formfieldbooleanDB := range backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanDB {
		forBackup = append(forBackup, formfieldbooleanDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("FormFieldBoolean")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&FormFieldBoolean_Fields, -1)
	for _, formfieldbooleanDB := range forBackup {

		var formfieldbooleanWOP FormFieldBooleanWOP
		formfieldbooleanDB.CopyBasicFieldsToFormFieldBooleanWOP(&formfieldbooleanWOP)

		row := sh.AddRow()
		row.WriteStruct(&formfieldbooleanWOP, -1)
	}
}

// RestoreXL from the "FormFieldBoolean" sheet all FormFieldBooleanDB instances
func (backRepoFormFieldBoolean *BackRepoFormFieldBooleanStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFormFieldBooleanid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["FormFieldBoolean"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFormFieldBoolean.rowVisitorFormFieldBoolean)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoFormFieldBoolean *BackRepoFormFieldBooleanStruct) rowVisitorFormFieldBoolean(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var formfieldbooleanWOP FormFieldBooleanWOP
		row.ReadStruct(&formfieldbooleanWOP)

		// add the unmarshalled struct to the stage
		formfieldbooleanDB := new(FormFieldBooleanDB)
		formfieldbooleanDB.CopyBasicFieldsFromFormFieldBooleanWOP(&formfieldbooleanWOP)

		formfieldbooleanDB_ID_atBackupTime := formfieldbooleanDB.ID
		formfieldbooleanDB.ID = 0
		query := backRepoFormFieldBoolean.db.Create(formfieldbooleanDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanDB[formfieldbooleanDB.ID] = formfieldbooleanDB
		BackRepoFormFieldBooleanid_atBckpTime_newID[formfieldbooleanDB_ID_atBackupTime] = formfieldbooleanDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FormFieldBooleanDB.json" in dirPath that stores an array
// of FormFieldBooleanDB and stores it in the database
// the map BackRepoFormFieldBooleanid_atBckpTime_newID is updated accordingly
func (backRepoFormFieldBoolean *BackRepoFormFieldBooleanStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFormFieldBooleanid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FormFieldBooleanDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json FormFieldBoolean file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FormFieldBooleanDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FormFieldBooleanDBID_FormFieldBooleanDB
	for _, formfieldbooleanDB := range forRestore {

		formfieldbooleanDB_ID_atBackupTime := formfieldbooleanDB.ID
		formfieldbooleanDB.ID = 0
		query := backRepoFormFieldBoolean.db.Create(formfieldbooleanDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanDB[formfieldbooleanDB.ID] = formfieldbooleanDB
		BackRepoFormFieldBooleanid_atBckpTime_newID[formfieldbooleanDB_ID_atBackupTime] = formfieldbooleanDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json FormFieldBoolean file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<FormFieldBoolean>id_atBckpTime_newID
// to compute new index
func (backRepoFormFieldBoolean *BackRepoFormFieldBooleanStruct) RestorePhaseTwo() {

	for _, formfieldbooleanDB := range backRepoFormFieldBoolean.Map_FormFieldBooleanDBID_FormFieldBooleanDB {

		// next line of code is to avert unused variable compilation error
		_ = formfieldbooleanDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoFormFieldBoolean.db.Model(formfieldbooleanDB).Updates(*formfieldbooleanDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFormFieldBooleanid_atBckpTime_newID map[uint]uint
