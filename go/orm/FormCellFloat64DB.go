// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongtable/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_FormCellFloat64_sql sql.NullBool
var dummy_FormCellFloat64_time time.Duration
var dummy_FormCellFloat64_sort sort.Float64Slice

// FormCellFloat64API is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model formcellfloat64API
type FormCellFloat64API struct {
	gorm.Model

	models.FormCellFloat64

	// encoding of pointers
	FormCellFloat64PointersEnconding
}

// FormCellFloat64PointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FormCellFloat64PointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// FormCellFloat64DB describes a formcellfloat64 in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model formcellfloat64DB
type FormCellFloat64DB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field formcellfloat64DB.Name
	Name_Data sql.NullString

	// Declation for basic field formcellfloat64DB.Value
	Value_Data sql.NullFloat64
	// encoding of pointers
	FormCellFloat64PointersEnconding
}

// FormCellFloat64DBs arrays formcellfloat64DBs
// swagger:response formcellfloat64DBsResponse
type FormCellFloat64DBs []FormCellFloat64DB

// FormCellFloat64DBResponse provides response
// swagger:response formcellfloat64DBResponse
type FormCellFloat64DBResponse struct {
	FormCellFloat64DB
}

// FormCellFloat64WOP is a FormCellFloat64 without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FormCellFloat64WOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value float64 `xlsx:"2"`
	// insertion for WOP pointer fields
}

var FormCellFloat64_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoFormCellFloat64Struct struct {
	// stores FormCellFloat64DB according to their gorm ID
	Map_FormCellFloat64DBID_FormCellFloat64DB map[uint]*FormCellFloat64DB

	// stores FormCellFloat64DB ID according to FormCellFloat64 address
	Map_FormCellFloat64Ptr_FormCellFloat64DBID map[*models.FormCellFloat64]uint

	// stores FormCellFloat64 according to their gorm ID
	Map_FormCellFloat64DBID_FormCellFloat64Ptr map[uint]*models.FormCellFloat64

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFormCellFloat64 *BackRepoFormCellFloat64Struct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFormCellFloat64.stage
	return
}

func (backRepoFormCellFloat64 *BackRepoFormCellFloat64Struct) GetDB() *gorm.DB {
	return backRepoFormCellFloat64.db
}

// GetFormCellFloat64DBFromFormCellFloat64Ptr is a handy function to access the back repo instance from the stage instance
func (backRepoFormCellFloat64 *BackRepoFormCellFloat64Struct) GetFormCellFloat64DBFromFormCellFloat64Ptr(formcellfloat64 *models.FormCellFloat64) (formcellfloat64DB *FormCellFloat64DB) {
	id := backRepoFormCellFloat64.Map_FormCellFloat64Ptr_FormCellFloat64DBID[formcellfloat64]
	formcellfloat64DB = backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64DB[id]
	return
}

// BackRepoFormCellFloat64.CommitPhaseOne commits all staged instances of FormCellFloat64 to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormCellFloat64 *BackRepoFormCellFloat64Struct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for formcellfloat64 := range stage.FormCellFloat64s {
		backRepoFormCellFloat64.CommitPhaseOneInstance(formcellfloat64)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, formcellfloat64 := range backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64Ptr {
		if _, ok := stage.FormCellFloat64s[formcellfloat64]; !ok {
			backRepoFormCellFloat64.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFormCellFloat64.CommitDeleteInstance commits deletion of FormCellFloat64 to the BackRepo
func (backRepoFormCellFloat64 *BackRepoFormCellFloat64Struct) CommitDeleteInstance(id uint) (Error error) {

	formcellfloat64 := backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64Ptr[id]

	// formcellfloat64 is not staged anymore, remove formcellfloat64DB
	formcellfloat64DB := backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64DB[id]
	query := backRepoFormCellFloat64.db.Unscoped().Delete(&formcellfloat64DB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoFormCellFloat64.Map_FormCellFloat64Ptr_FormCellFloat64DBID, formcellfloat64)
	delete(backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64Ptr, id)
	delete(backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64DB, id)

	return
}

// BackRepoFormCellFloat64.CommitPhaseOneInstance commits formcellfloat64 staged instances of FormCellFloat64 to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormCellFloat64 *BackRepoFormCellFloat64Struct) CommitPhaseOneInstance(formcellfloat64 *models.FormCellFloat64) (Error error) {

	// check if the formcellfloat64 is not commited yet
	if _, ok := backRepoFormCellFloat64.Map_FormCellFloat64Ptr_FormCellFloat64DBID[formcellfloat64]; ok {
		return
	}

	// initiate formcellfloat64
	var formcellfloat64DB FormCellFloat64DB
	formcellfloat64DB.CopyBasicFieldsFromFormCellFloat64(formcellfloat64)

	query := backRepoFormCellFloat64.db.Create(&formcellfloat64DB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoFormCellFloat64.Map_FormCellFloat64Ptr_FormCellFloat64DBID[formcellfloat64] = formcellfloat64DB.ID
	backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64Ptr[formcellfloat64DB.ID] = formcellfloat64
	backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64DB[formcellfloat64DB.ID] = &formcellfloat64DB

	return
}

// BackRepoFormCellFloat64.CommitPhaseTwo commits all staged instances of FormCellFloat64 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCellFloat64 *BackRepoFormCellFloat64Struct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, formcellfloat64 := range backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64Ptr {
		backRepoFormCellFloat64.CommitPhaseTwoInstance(backRepo, idx, formcellfloat64)
	}

	return
}

// BackRepoFormCellFloat64.CommitPhaseTwoInstance commits {{structname }} of models.FormCellFloat64 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCellFloat64 *BackRepoFormCellFloat64Struct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, formcellfloat64 *models.FormCellFloat64) (Error error) {

	// fetch matching formcellfloat64DB
	if formcellfloat64DB, ok := backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64DB[idx]; ok {

		formcellfloat64DB.CopyBasicFieldsFromFormCellFloat64(formcellfloat64)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoFormCellFloat64.db.Save(&formcellfloat64DB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown FormCellFloat64 intance %s", formcellfloat64.Name))
		return err
	}

	return
}

// BackRepoFormCellFloat64.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFormCellFloat64 *BackRepoFormCellFloat64Struct) CheckoutPhaseOne() (Error error) {

	formcellfloat64DBArray := make([]FormCellFloat64DB, 0)
	query := backRepoFormCellFloat64.db.Find(&formcellfloat64DBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	formcellfloat64InstancesToBeRemovedFromTheStage := make(map[*models.FormCellFloat64]any)
	for key, value := range backRepoFormCellFloat64.stage.FormCellFloat64s {
		formcellfloat64InstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, formcellfloat64DB := range formcellfloat64DBArray {
		backRepoFormCellFloat64.CheckoutPhaseOneInstance(&formcellfloat64DB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		formcellfloat64, ok := backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64Ptr[formcellfloat64DB.ID]
		if ok {
			delete(formcellfloat64InstancesToBeRemovedFromTheStage, formcellfloat64)
		}
	}

	// remove from stage and back repo's 3 maps all formcellfloat64s that are not in the checkout
	for formcellfloat64 := range formcellfloat64InstancesToBeRemovedFromTheStage {
		formcellfloat64.Unstage(backRepoFormCellFloat64.GetStage())

		// remove instance from the back repo 3 maps
		formcellfloat64ID := backRepoFormCellFloat64.Map_FormCellFloat64Ptr_FormCellFloat64DBID[formcellfloat64]
		delete(backRepoFormCellFloat64.Map_FormCellFloat64Ptr_FormCellFloat64DBID, formcellfloat64)
		delete(backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64DB, formcellfloat64ID)
		delete(backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64Ptr, formcellfloat64ID)
	}

	return
}

// CheckoutPhaseOneInstance takes a formcellfloat64DB that has been found in the DB, updates the backRepo and stages the
// models version of the formcellfloat64DB
func (backRepoFormCellFloat64 *BackRepoFormCellFloat64Struct) CheckoutPhaseOneInstance(formcellfloat64DB *FormCellFloat64DB) (Error error) {

	formcellfloat64, ok := backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64Ptr[formcellfloat64DB.ID]
	if !ok {
		formcellfloat64 = new(models.FormCellFloat64)

		backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64Ptr[formcellfloat64DB.ID] = formcellfloat64
		backRepoFormCellFloat64.Map_FormCellFloat64Ptr_FormCellFloat64DBID[formcellfloat64] = formcellfloat64DB.ID

		// append model store with the new element
		formcellfloat64.Name = formcellfloat64DB.Name_Data.String
		formcellfloat64.Stage(backRepoFormCellFloat64.GetStage())
	}
	formcellfloat64DB.CopyBasicFieldsToFormCellFloat64(formcellfloat64)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	formcellfloat64.Stage(backRepoFormCellFloat64.GetStage())

	// preserve pointer to formcellfloat64DB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FormCellFloat64DBID_FormCellFloat64DB)[formcellfloat64DB hold variable pointers
	formcellfloat64DB_Data := *formcellfloat64DB
	preservedPtrToFormCellFloat64 := &formcellfloat64DB_Data
	backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64DB[formcellfloat64DB.ID] = preservedPtrToFormCellFloat64

	return
}

// BackRepoFormCellFloat64.CheckoutPhaseTwo Checkouts all staged instances of FormCellFloat64 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCellFloat64 *BackRepoFormCellFloat64Struct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, formcellfloat64DB := range backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64DB {
		backRepoFormCellFloat64.CheckoutPhaseTwoInstance(backRepo, formcellfloat64DB)
	}
	return
}

// BackRepoFormCellFloat64.CheckoutPhaseTwoInstance Checkouts staged instances of FormCellFloat64 to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCellFloat64 *BackRepoFormCellFloat64Struct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, formcellfloat64DB *FormCellFloat64DB) (Error error) {

	formcellfloat64 := backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64Ptr[formcellfloat64DB.ID]
	_ = formcellfloat64 // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitFormCellFloat64 allows commit of a single formcellfloat64 (if already staged)
func (backRepo *BackRepoStruct) CommitFormCellFloat64(formcellfloat64 *models.FormCellFloat64) {
	backRepo.BackRepoFormCellFloat64.CommitPhaseOneInstance(formcellfloat64)
	if id, ok := backRepo.BackRepoFormCellFloat64.Map_FormCellFloat64Ptr_FormCellFloat64DBID[formcellfloat64]; ok {
		backRepo.BackRepoFormCellFloat64.CommitPhaseTwoInstance(backRepo, id, formcellfloat64)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFormCellFloat64 allows checkout of a single formcellfloat64 (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFormCellFloat64(formcellfloat64 *models.FormCellFloat64) {
	// check if the formcellfloat64 is staged
	if _, ok := backRepo.BackRepoFormCellFloat64.Map_FormCellFloat64Ptr_FormCellFloat64DBID[formcellfloat64]; ok {

		if id, ok := backRepo.BackRepoFormCellFloat64.Map_FormCellFloat64Ptr_FormCellFloat64DBID[formcellfloat64]; ok {
			var formcellfloat64DB FormCellFloat64DB
			formcellfloat64DB.ID = id

			if err := backRepo.BackRepoFormCellFloat64.db.First(&formcellfloat64DB, id).Error; err != nil {
				log.Panicln("CheckoutFormCellFloat64 : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFormCellFloat64.CheckoutPhaseOneInstance(&formcellfloat64DB)
			backRepo.BackRepoFormCellFloat64.CheckoutPhaseTwoInstance(backRepo, &formcellfloat64DB)
		}
	}
}

// CopyBasicFieldsFromFormCellFloat64
func (formcellfloat64DB *FormCellFloat64DB) CopyBasicFieldsFromFormCellFloat64(formcellfloat64 *models.FormCellFloat64) {
	// insertion point for fields commit

	formcellfloat64DB.Name_Data.String = formcellfloat64.Name
	formcellfloat64DB.Name_Data.Valid = true

	formcellfloat64DB.Value_Data.Float64 = formcellfloat64.Value
	formcellfloat64DB.Value_Data.Valid = true
}

// CopyBasicFieldsFromFormCellFloat64WOP
func (formcellfloat64DB *FormCellFloat64DB) CopyBasicFieldsFromFormCellFloat64WOP(formcellfloat64 *FormCellFloat64WOP) {
	// insertion point for fields commit

	formcellfloat64DB.Name_Data.String = formcellfloat64.Name
	formcellfloat64DB.Name_Data.Valid = true

	formcellfloat64DB.Value_Data.Float64 = formcellfloat64.Value
	formcellfloat64DB.Value_Data.Valid = true
}

// CopyBasicFieldsToFormCellFloat64
func (formcellfloat64DB *FormCellFloat64DB) CopyBasicFieldsToFormCellFloat64(formcellfloat64 *models.FormCellFloat64) {
	// insertion point for checkout of basic fields (back repo to stage)
	formcellfloat64.Name = formcellfloat64DB.Name_Data.String
	formcellfloat64.Value = formcellfloat64DB.Value_Data.Float64
}

// CopyBasicFieldsToFormCellFloat64WOP
func (formcellfloat64DB *FormCellFloat64DB) CopyBasicFieldsToFormCellFloat64WOP(formcellfloat64 *FormCellFloat64WOP) {
	formcellfloat64.ID = int(formcellfloat64DB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	formcellfloat64.Name = formcellfloat64DB.Name_Data.String
	formcellfloat64.Value = formcellfloat64DB.Value_Data.Float64
}

// Backup generates a json file from a slice of all FormCellFloat64DB instances in the backrepo
func (backRepoFormCellFloat64 *BackRepoFormCellFloat64Struct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FormCellFloat64DB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormCellFloat64DB, 0)
	for _, formcellfloat64DB := range backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64DB {
		forBackup = append(forBackup, formcellfloat64DB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json FormCellFloat64 ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json FormCellFloat64 file", err.Error())
	}
}

// Backup generates a json file from a slice of all FormCellFloat64DB instances in the backrepo
func (backRepoFormCellFloat64 *BackRepoFormCellFloat64Struct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormCellFloat64DB, 0)
	for _, formcellfloat64DB := range backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64DB {
		forBackup = append(forBackup, formcellfloat64DB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("FormCellFloat64")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&FormCellFloat64_Fields, -1)
	for _, formcellfloat64DB := range forBackup {

		var formcellfloat64WOP FormCellFloat64WOP
		formcellfloat64DB.CopyBasicFieldsToFormCellFloat64WOP(&formcellfloat64WOP)

		row := sh.AddRow()
		row.WriteStruct(&formcellfloat64WOP, -1)
	}
}

// RestoreXL from the "FormCellFloat64" sheet all FormCellFloat64DB instances
func (backRepoFormCellFloat64 *BackRepoFormCellFloat64Struct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFormCellFloat64id_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["FormCellFloat64"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFormCellFloat64.rowVisitorFormCellFloat64)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoFormCellFloat64 *BackRepoFormCellFloat64Struct) rowVisitorFormCellFloat64(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var formcellfloat64WOP FormCellFloat64WOP
		row.ReadStruct(&formcellfloat64WOP)

		// add the unmarshalled struct to the stage
		formcellfloat64DB := new(FormCellFloat64DB)
		formcellfloat64DB.CopyBasicFieldsFromFormCellFloat64WOP(&formcellfloat64WOP)

		formcellfloat64DB_ID_atBackupTime := formcellfloat64DB.ID
		formcellfloat64DB.ID = 0
		query := backRepoFormCellFloat64.db.Create(formcellfloat64DB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64DB[formcellfloat64DB.ID] = formcellfloat64DB
		BackRepoFormCellFloat64id_atBckpTime_newID[formcellfloat64DB_ID_atBackupTime] = formcellfloat64DB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FormCellFloat64DB.json" in dirPath that stores an array
// of FormCellFloat64DB and stores it in the database
// the map BackRepoFormCellFloat64id_atBckpTime_newID is updated accordingly
func (backRepoFormCellFloat64 *BackRepoFormCellFloat64Struct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFormCellFloat64id_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FormCellFloat64DB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json FormCellFloat64 file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FormCellFloat64DB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FormCellFloat64DBID_FormCellFloat64DB
	for _, formcellfloat64DB := range forRestore {

		formcellfloat64DB_ID_atBackupTime := formcellfloat64DB.ID
		formcellfloat64DB.ID = 0
		query := backRepoFormCellFloat64.db.Create(formcellfloat64DB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64DB[formcellfloat64DB.ID] = formcellfloat64DB
		BackRepoFormCellFloat64id_atBckpTime_newID[formcellfloat64DB_ID_atBackupTime] = formcellfloat64DB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json FormCellFloat64 file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<FormCellFloat64>id_atBckpTime_newID
// to compute new index
func (backRepoFormCellFloat64 *BackRepoFormCellFloat64Struct) RestorePhaseTwo() {

	for _, formcellfloat64DB := range backRepoFormCellFloat64.Map_FormCellFloat64DBID_FormCellFloat64DB {

		// next line of code is to avert unused variable compilation error
		_ = formcellfloat64DB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoFormCellFloat64.db.Model(formcellfloat64DB).Updates(*formcellfloat64DB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFormCellFloat64id_atBckpTime_newID map[uint]uint
