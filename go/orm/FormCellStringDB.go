// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongtable/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_FormCellString_sql sql.NullBool
var dummy_FormCellString_time time.Duration
var dummy_FormCellString_sort sort.Float64Slice

// FormCellStringAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model formcellstringAPI
type FormCellStringAPI struct {
	gorm.Model

	models.FormCellString

	// encoding of pointers
	FormCellStringPointersEnconding
}

// FormCellStringPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FormCellStringPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// FormCellStringDB describes a formcellstring in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model formcellstringDB
type FormCellStringDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field formcellstringDB.Name
	Name_Data sql.NullString

	// Declation for basic field formcellstringDB.Value
	Value_Data sql.NullString
	// encoding of pointers
	FormCellStringPointersEnconding
}

// FormCellStringDBs arrays formcellstringDBs
// swagger:response formcellstringDBsResponse
type FormCellStringDBs []FormCellStringDB

// FormCellStringDBResponse provides response
// swagger:response formcellstringDBResponse
type FormCellStringDBResponse struct {
	FormCellStringDB
}

// FormCellStringWOP is a FormCellString without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FormCellStringWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var FormCellString_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoFormCellStringStruct struct {
	// stores FormCellStringDB according to their gorm ID
	Map_FormCellStringDBID_FormCellStringDB map[uint]*FormCellStringDB

	// stores FormCellStringDB ID according to FormCellString address
	Map_FormCellStringPtr_FormCellStringDBID map[*models.FormCellString]uint

	// stores FormCellString according to their gorm ID
	Map_FormCellStringDBID_FormCellStringPtr map[uint]*models.FormCellString

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFormCellString *BackRepoFormCellStringStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFormCellString.stage
	return
}

func (backRepoFormCellString *BackRepoFormCellStringStruct) GetDB() *gorm.DB {
	return backRepoFormCellString.db
}

// GetFormCellStringDBFromFormCellStringPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFormCellString *BackRepoFormCellStringStruct) GetFormCellStringDBFromFormCellStringPtr(formcellstring *models.FormCellString) (formcellstringDB *FormCellStringDB) {
	id := backRepoFormCellString.Map_FormCellStringPtr_FormCellStringDBID[formcellstring]
	formcellstringDB = backRepoFormCellString.Map_FormCellStringDBID_FormCellStringDB[id]
	return
}

// BackRepoFormCellString.CommitPhaseOne commits all staged instances of FormCellString to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormCellString *BackRepoFormCellStringStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for formcellstring := range stage.FormCellStrings {
		backRepoFormCellString.CommitPhaseOneInstance(formcellstring)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, formcellstring := range backRepoFormCellString.Map_FormCellStringDBID_FormCellStringPtr {
		if _, ok := stage.FormCellStrings[formcellstring]; !ok {
			backRepoFormCellString.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFormCellString.CommitDeleteInstance commits deletion of FormCellString to the BackRepo
func (backRepoFormCellString *BackRepoFormCellStringStruct) CommitDeleteInstance(id uint) (Error error) {

	formcellstring := backRepoFormCellString.Map_FormCellStringDBID_FormCellStringPtr[id]

	// formcellstring is not staged anymore, remove formcellstringDB
	formcellstringDB := backRepoFormCellString.Map_FormCellStringDBID_FormCellStringDB[id]
	query := backRepoFormCellString.db.Unscoped().Delete(&formcellstringDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoFormCellString.Map_FormCellStringPtr_FormCellStringDBID, formcellstring)
	delete(backRepoFormCellString.Map_FormCellStringDBID_FormCellStringPtr, id)
	delete(backRepoFormCellString.Map_FormCellStringDBID_FormCellStringDB, id)

	return
}

// BackRepoFormCellString.CommitPhaseOneInstance commits formcellstring staged instances of FormCellString to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormCellString *BackRepoFormCellStringStruct) CommitPhaseOneInstance(formcellstring *models.FormCellString) (Error error) {

	// check if the formcellstring is not commited yet
	if _, ok := backRepoFormCellString.Map_FormCellStringPtr_FormCellStringDBID[formcellstring]; ok {
		return
	}

	// initiate formcellstring
	var formcellstringDB FormCellStringDB
	formcellstringDB.CopyBasicFieldsFromFormCellString(formcellstring)

	query := backRepoFormCellString.db.Create(&formcellstringDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoFormCellString.Map_FormCellStringPtr_FormCellStringDBID[formcellstring] = formcellstringDB.ID
	backRepoFormCellString.Map_FormCellStringDBID_FormCellStringPtr[formcellstringDB.ID] = formcellstring
	backRepoFormCellString.Map_FormCellStringDBID_FormCellStringDB[formcellstringDB.ID] = &formcellstringDB

	return
}

// BackRepoFormCellString.CommitPhaseTwo commits all staged instances of FormCellString to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCellString *BackRepoFormCellStringStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, formcellstring := range backRepoFormCellString.Map_FormCellStringDBID_FormCellStringPtr {
		backRepoFormCellString.CommitPhaseTwoInstance(backRepo, idx, formcellstring)
	}

	return
}

// BackRepoFormCellString.CommitPhaseTwoInstance commits {{structname }} of models.FormCellString to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCellString *BackRepoFormCellStringStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, formcellstring *models.FormCellString) (Error error) {

	// fetch matching formcellstringDB
	if formcellstringDB, ok := backRepoFormCellString.Map_FormCellStringDBID_FormCellStringDB[idx]; ok {

		formcellstringDB.CopyBasicFieldsFromFormCellString(formcellstring)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoFormCellString.db.Save(&formcellstringDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown FormCellString intance %s", formcellstring.Name))
		return err
	}

	return
}

// BackRepoFormCellString.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFormCellString *BackRepoFormCellStringStruct) CheckoutPhaseOne() (Error error) {

	formcellstringDBArray := make([]FormCellStringDB, 0)
	query := backRepoFormCellString.db.Find(&formcellstringDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	formcellstringInstancesToBeRemovedFromTheStage := make(map[*models.FormCellString]any)
	for key, value := range backRepoFormCellString.stage.FormCellStrings {
		formcellstringInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, formcellstringDB := range formcellstringDBArray {
		backRepoFormCellString.CheckoutPhaseOneInstance(&formcellstringDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		formcellstring, ok := backRepoFormCellString.Map_FormCellStringDBID_FormCellStringPtr[formcellstringDB.ID]
		if ok {
			delete(formcellstringInstancesToBeRemovedFromTheStage, formcellstring)
		}
	}

	// remove from stage and back repo's 3 maps all formcellstrings that are not in the checkout
	for formcellstring := range formcellstringInstancesToBeRemovedFromTheStage {
		formcellstring.Unstage(backRepoFormCellString.GetStage())

		// remove instance from the back repo 3 maps
		formcellstringID := backRepoFormCellString.Map_FormCellStringPtr_FormCellStringDBID[formcellstring]
		delete(backRepoFormCellString.Map_FormCellStringPtr_FormCellStringDBID, formcellstring)
		delete(backRepoFormCellString.Map_FormCellStringDBID_FormCellStringDB, formcellstringID)
		delete(backRepoFormCellString.Map_FormCellStringDBID_FormCellStringPtr, formcellstringID)
	}

	return
}

// CheckoutPhaseOneInstance takes a formcellstringDB that has been found in the DB, updates the backRepo and stages the
// models version of the formcellstringDB
func (backRepoFormCellString *BackRepoFormCellStringStruct) CheckoutPhaseOneInstance(formcellstringDB *FormCellStringDB) (Error error) {

	formcellstring, ok := backRepoFormCellString.Map_FormCellStringDBID_FormCellStringPtr[formcellstringDB.ID]
	if !ok {
		formcellstring = new(models.FormCellString)

		backRepoFormCellString.Map_FormCellStringDBID_FormCellStringPtr[formcellstringDB.ID] = formcellstring
		backRepoFormCellString.Map_FormCellStringPtr_FormCellStringDBID[formcellstring] = formcellstringDB.ID

		// append model store with the new element
		formcellstring.Name = formcellstringDB.Name_Data.String
		formcellstring.Stage(backRepoFormCellString.GetStage())
	}
	formcellstringDB.CopyBasicFieldsToFormCellString(formcellstring)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	formcellstring.Stage(backRepoFormCellString.GetStage())

	// preserve pointer to formcellstringDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FormCellStringDBID_FormCellStringDB)[formcellstringDB hold variable pointers
	formcellstringDB_Data := *formcellstringDB
	preservedPtrToFormCellString := &formcellstringDB_Data
	backRepoFormCellString.Map_FormCellStringDBID_FormCellStringDB[formcellstringDB.ID] = preservedPtrToFormCellString

	return
}

// BackRepoFormCellString.CheckoutPhaseTwo Checkouts all staged instances of FormCellString to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCellString *BackRepoFormCellStringStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, formcellstringDB := range backRepoFormCellString.Map_FormCellStringDBID_FormCellStringDB {
		backRepoFormCellString.CheckoutPhaseTwoInstance(backRepo, formcellstringDB)
	}
	return
}

// BackRepoFormCellString.CheckoutPhaseTwoInstance Checkouts staged instances of FormCellString to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCellString *BackRepoFormCellStringStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, formcellstringDB *FormCellStringDB) (Error error) {

	formcellstring := backRepoFormCellString.Map_FormCellStringDBID_FormCellStringPtr[formcellstringDB.ID]
	_ = formcellstring // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitFormCellString allows commit of a single formcellstring (if already staged)
func (backRepo *BackRepoStruct) CommitFormCellString(formcellstring *models.FormCellString) {
	backRepo.BackRepoFormCellString.CommitPhaseOneInstance(formcellstring)
	if id, ok := backRepo.BackRepoFormCellString.Map_FormCellStringPtr_FormCellStringDBID[formcellstring]; ok {
		backRepo.BackRepoFormCellString.CommitPhaseTwoInstance(backRepo, id, formcellstring)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFormCellString allows checkout of a single formcellstring (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFormCellString(formcellstring *models.FormCellString) {
	// check if the formcellstring is staged
	if _, ok := backRepo.BackRepoFormCellString.Map_FormCellStringPtr_FormCellStringDBID[formcellstring]; ok {

		if id, ok := backRepo.BackRepoFormCellString.Map_FormCellStringPtr_FormCellStringDBID[formcellstring]; ok {
			var formcellstringDB FormCellStringDB
			formcellstringDB.ID = id

			if err := backRepo.BackRepoFormCellString.db.First(&formcellstringDB, id).Error; err != nil {
				log.Panicln("CheckoutFormCellString : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFormCellString.CheckoutPhaseOneInstance(&formcellstringDB)
			backRepo.BackRepoFormCellString.CheckoutPhaseTwoInstance(backRepo, &formcellstringDB)
		}
	}
}

// CopyBasicFieldsFromFormCellString
func (formcellstringDB *FormCellStringDB) CopyBasicFieldsFromFormCellString(formcellstring *models.FormCellString) {
	// insertion point for fields commit

	formcellstringDB.Name_Data.String = formcellstring.Name
	formcellstringDB.Name_Data.Valid = true

	formcellstringDB.Value_Data.String = formcellstring.Value
	formcellstringDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromFormCellStringWOP
func (formcellstringDB *FormCellStringDB) CopyBasicFieldsFromFormCellStringWOP(formcellstring *FormCellStringWOP) {
	// insertion point for fields commit

	formcellstringDB.Name_Data.String = formcellstring.Name
	formcellstringDB.Name_Data.Valid = true

	formcellstringDB.Value_Data.String = formcellstring.Value
	formcellstringDB.Value_Data.Valid = true
}

// CopyBasicFieldsToFormCellString
func (formcellstringDB *FormCellStringDB) CopyBasicFieldsToFormCellString(formcellstring *models.FormCellString) {
	// insertion point for checkout of basic fields (back repo to stage)
	formcellstring.Name = formcellstringDB.Name_Data.String
	formcellstring.Value = formcellstringDB.Value_Data.String
}

// CopyBasicFieldsToFormCellStringWOP
func (formcellstringDB *FormCellStringDB) CopyBasicFieldsToFormCellStringWOP(formcellstring *FormCellStringWOP) {
	formcellstring.ID = int(formcellstringDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	formcellstring.Name = formcellstringDB.Name_Data.String
	formcellstring.Value = formcellstringDB.Value_Data.String
}

// Backup generates a json file from a slice of all FormCellStringDB instances in the backrepo
func (backRepoFormCellString *BackRepoFormCellStringStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FormCellStringDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormCellStringDB, 0)
	for _, formcellstringDB := range backRepoFormCellString.Map_FormCellStringDBID_FormCellStringDB {
		forBackup = append(forBackup, formcellstringDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json FormCellString ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json FormCellString file", err.Error())
	}
}

// Backup generates a json file from a slice of all FormCellStringDB instances in the backrepo
func (backRepoFormCellString *BackRepoFormCellStringStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormCellStringDB, 0)
	for _, formcellstringDB := range backRepoFormCellString.Map_FormCellStringDBID_FormCellStringDB {
		forBackup = append(forBackup, formcellstringDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("FormCellString")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&FormCellString_Fields, -1)
	for _, formcellstringDB := range forBackup {

		var formcellstringWOP FormCellStringWOP
		formcellstringDB.CopyBasicFieldsToFormCellStringWOP(&formcellstringWOP)

		row := sh.AddRow()
		row.WriteStruct(&formcellstringWOP, -1)
	}
}

// RestoreXL from the "FormCellString" sheet all FormCellStringDB instances
func (backRepoFormCellString *BackRepoFormCellStringStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFormCellStringid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["FormCellString"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFormCellString.rowVisitorFormCellString)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoFormCellString *BackRepoFormCellStringStruct) rowVisitorFormCellString(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var formcellstringWOP FormCellStringWOP
		row.ReadStruct(&formcellstringWOP)

		// add the unmarshalled struct to the stage
		formcellstringDB := new(FormCellStringDB)
		formcellstringDB.CopyBasicFieldsFromFormCellStringWOP(&formcellstringWOP)

		formcellstringDB_ID_atBackupTime := formcellstringDB.ID
		formcellstringDB.ID = 0
		query := backRepoFormCellString.db.Create(formcellstringDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoFormCellString.Map_FormCellStringDBID_FormCellStringDB[formcellstringDB.ID] = formcellstringDB
		BackRepoFormCellStringid_atBckpTime_newID[formcellstringDB_ID_atBackupTime] = formcellstringDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FormCellStringDB.json" in dirPath that stores an array
// of FormCellStringDB and stores it in the database
// the map BackRepoFormCellStringid_atBckpTime_newID is updated accordingly
func (backRepoFormCellString *BackRepoFormCellStringStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFormCellStringid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FormCellStringDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json FormCellString file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FormCellStringDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FormCellStringDBID_FormCellStringDB
	for _, formcellstringDB := range forRestore {

		formcellstringDB_ID_atBackupTime := formcellstringDB.ID
		formcellstringDB.ID = 0
		query := backRepoFormCellString.db.Create(formcellstringDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoFormCellString.Map_FormCellStringDBID_FormCellStringDB[formcellstringDB.ID] = formcellstringDB
		BackRepoFormCellStringid_atBckpTime_newID[formcellstringDB_ID_atBackupTime] = formcellstringDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json FormCellString file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<FormCellString>id_atBckpTime_newID
// to compute new index
func (backRepoFormCellString *BackRepoFormCellStringStruct) RestorePhaseTwo() {

	for _, formcellstringDB := range backRepoFormCellString.Map_FormCellStringDBID_FormCellStringDB {

		// next line of code is to avert unused variable compilation error
		_ = formcellstringDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoFormCellString.db.Model(formcellstringDB).Updates(*formcellstringDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFormCellStringid_atBckpTime_newID map[uint]uint
