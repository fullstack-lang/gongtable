// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongtable/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_FormCellInt_sql sql.NullBool
var dummy_FormCellInt_time time.Duration
var dummy_FormCellInt_sort sort.Float64Slice

// FormCellIntAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model formcellintAPI
type FormCellIntAPI struct {
	gorm.Model

	models.FormCellInt

	// encoding of pointers
	FormCellIntPointersEnconding
}

// FormCellIntPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type FormCellIntPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// FormCellIntDB describes a formcellint in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model formcellintDB
type FormCellIntDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field formcellintDB.Name
	Name_Data sql.NullString

	// Declation for basic field formcellintDB.Value
	Value_Data sql.NullInt64
	// encoding of pointers
	FormCellIntPointersEnconding
}

// FormCellIntDBs arrays formcellintDBs
// swagger:response formcellintDBsResponse
type FormCellIntDBs []FormCellIntDB

// FormCellIntDBResponse provides response
// swagger:response formcellintDBResponse
type FormCellIntDBResponse struct {
	FormCellIntDB
}

// FormCellIntWOP is a FormCellInt without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type FormCellIntWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Value int `xlsx:"2"`
	// insertion for WOP pointer fields
}

var FormCellInt_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Value",
}

type BackRepoFormCellIntStruct struct {
	// stores FormCellIntDB according to their gorm ID
	Map_FormCellIntDBID_FormCellIntDB map[uint]*FormCellIntDB

	// stores FormCellIntDB ID according to FormCellInt address
	Map_FormCellIntPtr_FormCellIntDBID map[*models.FormCellInt]uint

	// stores FormCellInt according to their gorm ID
	Map_FormCellIntDBID_FormCellIntPtr map[uint]*models.FormCellInt

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoFormCellInt *BackRepoFormCellIntStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoFormCellInt.stage
	return
}

func (backRepoFormCellInt *BackRepoFormCellIntStruct) GetDB() *gorm.DB {
	return backRepoFormCellInt.db
}

// GetFormCellIntDBFromFormCellIntPtr is a handy function to access the back repo instance from the stage instance
func (backRepoFormCellInt *BackRepoFormCellIntStruct) GetFormCellIntDBFromFormCellIntPtr(formcellint *models.FormCellInt) (formcellintDB *FormCellIntDB) {
	id := backRepoFormCellInt.Map_FormCellIntPtr_FormCellIntDBID[formcellint]
	formcellintDB = backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntDB[id]
	return
}

// BackRepoFormCellInt.CommitPhaseOne commits all staged instances of FormCellInt to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormCellInt *BackRepoFormCellIntStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for formcellint := range stage.FormCellInts {
		backRepoFormCellInt.CommitPhaseOneInstance(formcellint)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, formcellint := range backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntPtr {
		if _, ok := stage.FormCellInts[formcellint]; !ok {
			backRepoFormCellInt.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoFormCellInt.CommitDeleteInstance commits deletion of FormCellInt to the BackRepo
func (backRepoFormCellInt *BackRepoFormCellIntStruct) CommitDeleteInstance(id uint) (Error error) {

	formcellint := backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntPtr[id]

	// formcellint is not staged anymore, remove formcellintDB
	formcellintDB := backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntDB[id]
	query := backRepoFormCellInt.db.Unscoped().Delete(&formcellintDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete(backRepoFormCellInt.Map_FormCellIntPtr_FormCellIntDBID, formcellint)
	delete(backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntPtr, id)
	delete(backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntDB, id)

	return
}

// BackRepoFormCellInt.CommitPhaseOneInstance commits formcellint staged instances of FormCellInt to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoFormCellInt *BackRepoFormCellIntStruct) CommitPhaseOneInstance(formcellint *models.FormCellInt) (Error error) {

	// check if the formcellint is not commited yet
	if _, ok := backRepoFormCellInt.Map_FormCellIntPtr_FormCellIntDBID[formcellint]; ok {
		return
	}

	// initiate formcellint
	var formcellintDB FormCellIntDB
	formcellintDB.CopyBasicFieldsFromFormCellInt(formcellint)

	query := backRepoFormCellInt.db.Create(&formcellintDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	backRepoFormCellInt.Map_FormCellIntPtr_FormCellIntDBID[formcellint] = formcellintDB.ID
	backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntPtr[formcellintDB.ID] = formcellint
	backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntDB[formcellintDB.ID] = &formcellintDB

	return
}

// BackRepoFormCellInt.CommitPhaseTwo commits all staged instances of FormCellInt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCellInt *BackRepoFormCellIntStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, formcellint := range backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntPtr {
		backRepoFormCellInt.CommitPhaseTwoInstance(backRepo, idx, formcellint)
	}

	return
}

// BackRepoFormCellInt.CommitPhaseTwoInstance commits {{structname }} of models.FormCellInt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCellInt *BackRepoFormCellIntStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, formcellint *models.FormCellInt) (Error error) {

	// fetch matching formcellintDB
	if formcellintDB, ok := backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntDB[idx]; ok {

		formcellintDB.CopyBasicFieldsFromFormCellInt(formcellint)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoFormCellInt.db.Save(&formcellintDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown FormCellInt intance %s", formcellint.Name))
		return err
	}

	return
}

// BackRepoFormCellInt.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoFormCellInt *BackRepoFormCellIntStruct) CheckoutPhaseOne() (Error error) {

	formcellintDBArray := make([]FormCellIntDB, 0)
	query := backRepoFormCellInt.db.Find(&formcellintDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	formcellintInstancesToBeRemovedFromTheStage := make(map[*models.FormCellInt]any)
	for key, value := range backRepoFormCellInt.stage.FormCellInts {
		formcellintInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, formcellintDB := range formcellintDBArray {
		backRepoFormCellInt.CheckoutPhaseOneInstance(&formcellintDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		formcellint, ok := backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntPtr[formcellintDB.ID]
		if ok {
			delete(formcellintInstancesToBeRemovedFromTheStage, formcellint)
		}
	}

	// remove from stage and back repo's 3 maps all formcellints that are not in the checkout
	for formcellint := range formcellintInstancesToBeRemovedFromTheStage {
		formcellint.Unstage(backRepoFormCellInt.GetStage())

		// remove instance from the back repo 3 maps
		formcellintID := backRepoFormCellInt.Map_FormCellIntPtr_FormCellIntDBID[formcellint]
		delete(backRepoFormCellInt.Map_FormCellIntPtr_FormCellIntDBID, formcellint)
		delete(backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntDB, formcellintID)
		delete(backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntPtr, formcellintID)
	}

	return
}

// CheckoutPhaseOneInstance takes a formcellintDB that has been found in the DB, updates the backRepo and stages the
// models version of the formcellintDB
func (backRepoFormCellInt *BackRepoFormCellIntStruct) CheckoutPhaseOneInstance(formcellintDB *FormCellIntDB) (Error error) {

	formcellint, ok := backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntPtr[formcellintDB.ID]
	if !ok {
		formcellint = new(models.FormCellInt)

		backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntPtr[formcellintDB.ID] = formcellint
		backRepoFormCellInt.Map_FormCellIntPtr_FormCellIntDBID[formcellint] = formcellintDB.ID

		// append model store with the new element
		formcellint.Name = formcellintDB.Name_Data.String
		formcellint.Stage(backRepoFormCellInt.GetStage())
	}
	formcellintDB.CopyBasicFieldsToFormCellInt(formcellint)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	formcellint.Stage(backRepoFormCellInt.GetStage())

	// preserve pointer to formcellintDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_FormCellIntDBID_FormCellIntDB)[formcellintDB hold variable pointers
	formcellintDB_Data := *formcellintDB
	preservedPtrToFormCellInt := &formcellintDB_Data
	backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntDB[formcellintDB.ID] = preservedPtrToFormCellInt

	return
}

// BackRepoFormCellInt.CheckoutPhaseTwo Checkouts all staged instances of FormCellInt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCellInt *BackRepoFormCellIntStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, formcellintDB := range backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntDB {
		backRepoFormCellInt.CheckoutPhaseTwoInstance(backRepo, formcellintDB)
	}
	return
}

// BackRepoFormCellInt.CheckoutPhaseTwoInstance Checkouts staged instances of FormCellInt to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoFormCellInt *BackRepoFormCellIntStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, formcellintDB *FormCellIntDB) (Error error) {

	formcellint := backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntPtr[formcellintDB.ID]
	_ = formcellint // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitFormCellInt allows commit of a single formcellint (if already staged)
func (backRepo *BackRepoStruct) CommitFormCellInt(formcellint *models.FormCellInt) {
	backRepo.BackRepoFormCellInt.CommitPhaseOneInstance(formcellint)
	if id, ok := backRepo.BackRepoFormCellInt.Map_FormCellIntPtr_FormCellIntDBID[formcellint]; ok {
		backRepo.BackRepoFormCellInt.CommitPhaseTwoInstance(backRepo, id, formcellint)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitFormCellInt allows checkout of a single formcellint (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutFormCellInt(formcellint *models.FormCellInt) {
	// check if the formcellint is staged
	if _, ok := backRepo.BackRepoFormCellInt.Map_FormCellIntPtr_FormCellIntDBID[formcellint]; ok {

		if id, ok := backRepo.BackRepoFormCellInt.Map_FormCellIntPtr_FormCellIntDBID[formcellint]; ok {
			var formcellintDB FormCellIntDB
			formcellintDB.ID = id

			if err := backRepo.BackRepoFormCellInt.db.First(&formcellintDB, id).Error; err != nil {
				log.Panicln("CheckoutFormCellInt : Problem with getting object with id:", id)
			}
			backRepo.BackRepoFormCellInt.CheckoutPhaseOneInstance(&formcellintDB)
			backRepo.BackRepoFormCellInt.CheckoutPhaseTwoInstance(backRepo, &formcellintDB)
		}
	}
}

// CopyBasicFieldsFromFormCellInt
func (formcellintDB *FormCellIntDB) CopyBasicFieldsFromFormCellInt(formcellint *models.FormCellInt) {
	// insertion point for fields commit

	formcellintDB.Name_Data.String = formcellint.Name
	formcellintDB.Name_Data.Valid = true

	formcellintDB.Value_Data.Int64 = int64(formcellint.Value)
	formcellintDB.Value_Data.Valid = true
}

// CopyBasicFieldsFromFormCellIntWOP
func (formcellintDB *FormCellIntDB) CopyBasicFieldsFromFormCellIntWOP(formcellint *FormCellIntWOP) {
	// insertion point for fields commit

	formcellintDB.Name_Data.String = formcellint.Name
	formcellintDB.Name_Data.Valid = true

	formcellintDB.Value_Data.Int64 = int64(formcellint.Value)
	formcellintDB.Value_Data.Valid = true
}

// CopyBasicFieldsToFormCellInt
func (formcellintDB *FormCellIntDB) CopyBasicFieldsToFormCellInt(formcellint *models.FormCellInt) {
	// insertion point for checkout of basic fields (back repo to stage)
	formcellint.Name = formcellintDB.Name_Data.String
	formcellint.Value = int(formcellintDB.Value_Data.Int64)
}

// CopyBasicFieldsToFormCellIntWOP
func (formcellintDB *FormCellIntDB) CopyBasicFieldsToFormCellIntWOP(formcellint *FormCellIntWOP) {
	formcellint.ID = int(formcellintDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	formcellint.Name = formcellintDB.Name_Data.String
	formcellint.Value = int(formcellintDB.Value_Data.Int64)
}

// Backup generates a json file from a slice of all FormCellIntDB instances in the backrepo
func (backRepoFormCellInt *BackRepoFormCellIntStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "FormCellIntDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormCellIntDB, 0)
	for _, formcellintDB := range backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntDB {
		forBackup = append(forBackup, formcellintDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json FormCellInt ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json FormCellInt file", err.Error())
	}
}

// Backup generates a json file from a slice of all FormCellIntDB instances in the backrepo
func (backRepoFormCellInt *BackRepoFormCellIntStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*FormCellIntDB, 0)
	for _, formcellintDB := range backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntDB {
		forBackup = append(forBackup, formcellintDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("FormCellInt")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&FormCellInt_Fields, -1)
	for _, formcellintDB := range forBackup {

		var formcellintWOP FormCellIntWOP
		formcellintDB.CopyBasicFieldsToFormCellIntWOP(&formcellintWOP)

		row := sh.AddRow()
		row.WriteStruct(&formcellintWOP, -1)
	}
}

// RestoreXL from the "FormCellInt" sheet all FormCellIntDB instances
func (backRepoFormCellInt *BackRepoFormCellIntStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoFormCellIntid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["FormCellInt"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoFormCellInt.rowVisitorFormCellInt)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoFormCellInt *BackRepoFormCellIntStruct) rowVisitorFormCellInt(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var formcellintWOP FormCellIntWOP
		row.ReadStruct(&formcellintWOP)

		// add the unmarshalled struct to the stage
		formcellintDB := new(FormCellIntDB)
		formcellintDB.CopyBasicFieldsFromFormCellIntWOP(&formcellintWOP)

		formcellintDB_ID_atBackupTime := formcellintDB.ID
		formcellintDB.ID = 0
		query := backRepoFormCellInt.db.Create(formcellintDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntDB[formcellintDB.ID] = formcellintDB
		BackRepoFormCellIntid_atBckpTime_newID[formcellintDB_ID_atBackupTime] = formcellintDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "FormCellIntDB.json" in dirPath that stores an array
// of FormCellIntDB and stores it in the database
// the map BackRepoFormCellIntid_atBckpTime_newID is updated accordingly
func (backRepoFormCellInt *BackRepoFormCellIntStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoFormCellIntid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "FormCellIntDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json FormCellInt file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*FormCellIntDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_FormCellIntDBID_FormCellIntDB
	for _, formcellintDB := range forRestore {

		formcellintDB_ID_atBackupTime := formcellintDB.ID
		formcellintDB.ID = 0
		query := backRepoFormCellInt.db.Create(formcellintDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntDB[formcellintDB.ID] = formcellintDB
		BackRepoFormCellIntid_atBckpTime_newID[formcellintDB_ID_atBackupTime] = formcellintDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json FormCellInt file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<FormCellInt>id_atBckpTime_newID
// to compute new index
func (backRepoFormCellInt *BackRepoFormCellIntStruct) RestorePhaseTwo() {

	for _, formcellintDB := range backRepoFormCellInt.Map_FormCellIntDBID_FormCellIntDB {

		// next line of code is to avert unused variable compilation error
		_ = formcellintDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoFormCellInt.db.Model(formcellintDB).Updates(*formcellintDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoFormCellIntid_atBckpTime_newID map[uint]uint
