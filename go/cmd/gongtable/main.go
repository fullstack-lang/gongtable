package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"strconv"

	gongtable_go "github.com/fullstack-lang/gongtable/go"
	gongtable_data "github.com/fullstack-lang/gongtable/go/data"
	gongtable_fullstack "github.com/fullstack-lang/gongtable/go/fullstack"
	gongtable_models "github.com/fullstack-lang/gongtable/go/models"
	gongtable_static "github.com/fullstack-lang/gongtable/go/static"

	gongdoc_load "github.com/fullstack-lang/gongdoc/go/load"
)

var (
	logGINFlag = flag.Bool("logGIN", false, "log mode for gin")

	unmarshallFromCode = flag.String("unmarshallFromCode", "", "unmarshall data from go file and '.go' (must be lowercased without spaces), If unmarshallFromCode arg is '', no unmarshalling")
	marshallOnCommit   = flag.String("marshallOnCommit", "", "on all commits, marshall staged data to a go file with the marshall name and '.go' (must be lowercased without spaces). If marshall arg is '', no marshalling")

	diagrams         = flag.Bool("diagrams", true, "parse/analysis go/models and go/diagrams")
	embeddedDiagrams = flag.Bool("embeddedDiagrams", false, "parse/analysis go/models and go/embeddedDiagrams")

	port = flag.Int("port", 8080, "port server")
)

// InjectionGateway is the singloton that stores all functions
// that can set the objects the stage
// InjectionGateway stores function as a map of names
var InjectionGateway = make(map[string](func()))

// hook marhalling to stage
type BeforeCommitImplementation struct {
}

func (impl *BeforeCommitImplementation) BeforeCommit(stage *gongtable_models.StageStruct) {
	file, err := os.Create(fmt.Sprintf("./%s.go", *marshallOnCommit))
	if err != nil {
		log.Fatal(err.Error())
	}
	defer file.Close()

	stage.Checkout()
	stage.Marshall(file, "github.com/fullstack-lang/gongtable/go/models", "main")
}

func main() {

	log.SetPrefix("gongtable: ")
	log.SetFlags(0)

	// parse program arguments
	flag.Parse()

	// setup the static file server and get the controller
	r := gongtable_static.ServeStaticFiles(*logGINFlag)

	// manualStage is the stage from the code
	var manualStage *gongtable_models.StageStruct
	log.Println("marshallOnCommit: ", *marshallOnCommit)
	log.Println("unmarshallFromCode: ", *unmarshallFromCode)

	if *marshallOnCommit != "" {
		// persistence in a SQLite file on disk in memory
		manualStage = gongtable_fullstack.NewStackInstance(r, "manual entry table")
	} else {
		// persistence in a SQLite file on disk
		manualStage = gongtable_fullstack.NewStackInstance(r, "manual entry table", "./test.db")
		log.Println("toto")
	}

	// to edit the data of the stack
	gongtable_data.Load(r, gongtable_go.GoModelsDir, "manual entry table")

	// generated stage is the stage generated by filling data with code
	// to test performances
	generatedStage := gongtable_fullstack.NewStackInstance(r, "generated table")

	nbRows := 200
	nbColumns := 10
	table := new(gongtable_models.Table).Stage(generatedStage)
	table.Name = "Table"
	table.HasColumnSorting = true
	table.HasFiltering = true
	table.HasPaginator = true

	for j := 0; j < nbColumns; j++ {
		column := new(gongtable_models.DisplayedColumn).Stage(generatedStage)
		column.Name = fmt.Sprintf("Column %d", j)
		table.DisplayedColumns = append(table.DisplayedColumns, column)
	}

	for i := 0; i < nbRows; i++ {
		row := new(gongtable_models.Row).Stage(generatedStage)
		row.Name = fmt.Sprintf("Row %d", i)
		table.Rows = append(table.Rows, row)

		for j := 0; j < nbColumns; j++ {
			cell := new(gongtable_models.Cell).Stage(generatedStage)
			cell.Name = fmt.Sprintf("Row %d - Column %d", i, j)

			cellString := new(gongtable_models.CellString).Stage(generatedStage)
			cellString.Name = cell.Name
			cellString.Value = cell.Name
			cell.CellString = cellString

			row.Cells = append(row.Cells, cell)
		}
	}

	generatedStage.Commit()

	if *unmarshallFromCode != "" {
		manualStage.Checkout()
		manualStage.Reset()
		manualStage.Commit()
		err := gongtable_models.ParseAstFile(manualStage, *unmarshallFromCode)

		// if the application is run with -unmarshallFromCode=xxx.go -marshallOnCommit
		// xxx.go might be absent the first time. However, this shall not be a show stopper.
		if err != nil {
			log.Println("no file to read " + err.Error())
		}

		manualStage.Commit()
	} else {
		// in case the database is used, checkout the content to the stage
		manualStage.Checkout()
	}

	// hook automatic marshall to go code at every commit
	if *marshallOnCommit != "" {
		hook := new(BeforeCommitImplementation)
		manualStage.OnInitCommitFromFrontCallback = hook
	}

	gongdoc_load.Load(
		"gongtable",
		"github.com/fullstack-lang/gongtable/go/models",
		gongtable_go.GoModelsDir,
		gongtable_go.GoDiagramsDir,
		r,
		*embeddedDiagrams,
		&manualStage.Map_GongStructName_InstancesNb)

	log.Printf("Server ready serve on localhost:" + strconv.Itoa(*port))
	err := r.Run(":" + strconv.Itoa(*port))
	if err != nil {
		log.Fatalln(err.Error())
	}
}
